{
 "meta": {
  "generator": "0.11.1",
  "format": 22,
  "date": 1688089412138
 },
 "custom": {
  "general": {
   "name": "General",
   "files": {
    "welcome": {
     "name": "Welcome",
     "type": "md",
     "content": "# test\n",
     "path": "docs/general/welcome.md"
    }
   }
  }
 },
 "classes": [
  {
   "name": "Giveaways<TDatabaseType>",
   "description": "Main Giveaways class.\n\nType parameters:\n\n- `TDatabaseType` ({@link DatabaseType}) - The database type that will be used in the module.",
   "extends": [
    [
     [
      "Emitter",
      "<"
     ],
     [
      "IGiveawaysEvents",
      "<"
     ],
     [
      "TDatabaseType",
      ">>"
     ]
    ]
   ],
   "construct": {
    "name": "Giveaways<TDatabaseType>",
    "description": "Main {@link Giveaways} constructor.",
    "params": [
     {
      "name": "client",
      "description": "Discord Client.",
      "type": [
       [
        [
         "Client"
        ]
       ]
      ]
     },
     {
      "name": "options",
      "description": "{@link Giveaways} configuration.",
      "type": [
       [
        [
         "IGiveawaysConfiguration",
         "<"
        ],
        [
         "TDatabaseType",
         ">"
        ]
       ]
      ]
     }
    ]
   },
   "props": [
    {
     "name": "ready",
     "description": "{@link Giveaways} ready state.",
     "type": [
      [
       [
        "boolean"
       ]
      ]
     ],
     "meta": {
      "line": 126,
      "file": "Giveaways.ts",
      "path": "src"
     }
    },
    {
     "name": "version",
     "description": "{@link Giveaways} version.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ],
     "meta": {
      "line": 132,
      "file": "Giveaways.ts",
      "path": "src"
     }
    },
    {
     "name": "_logger",
     "description": "{@link Giveaways} logger.",
     "access": "private",
     "type": [
      [
       [
        "Logger"
       ]
      ]
     ],
     "meta": {
      "line": 138,
      "file": "Giveaways.ts",
      "path": "src"
     }
    },
    {
     "name": "options",
     "description": "Completed, filled and fixed {@link Giveaways} configuration.",
     "type": [
      [
       [
        "Required",
        "<"
       ],
       [
        "IGiveawaysConfiguration",
        "<"
       ],
       [
        "DatabaseType",
        ">>"
       ]
      ]
     ],
     "meta": {
      "line": 151,
      "file": "Giveaways.ts",
      "path": "src"
     }
    },
    {
     "name": "db",
     "description": "External database (such as Enmap or MongoDB) if used.",
     "nullable": true,
     "type": [
      [
       [
        "Database",
        "<"
       ],
       [
        "DatabaseType",
        ">"
       ]
      ]
     ],
     "meta": {
      "line": 157,
      "file": "Giveaways.ts",
      "path": "src"
     }
    },
    {
     "name": "database",
     "description": "Database Manager.",
     "type": [
      [
       [
        "DatabaseManager"
       ]
      ]
     ],
     "meta": {
      "line": 163,
      "file": "Giveaways.ts",
      "path": "src"
     }
    },
    {
     "name": "giveawaysCheckingInterval",
     "description": "{@link Giveaways} ending state checking interval.",
     "type": [
      [
       [
        "NodeJS",
        "."
       ],
       [
        "Timeout"
       ]
      ]
     ],
     "meta": {
      "line": 169,
      "file": "Giveaways.ts",
      "path": "src"
     }
    },
    {
     "name": "_messageUtils",
     "description": "Message utils instance.",
     "access": "private",
     "type": [
      [
       [
        "MessageUtils"
       ]
      ]
     ],
     "meta": {
      "line": 175,
      "file": "Giveaways.ts",
      "path": "src"
     }
    }
   ],
   "methods": [
    {
     "name": "_init",
     "description": "Initialize the database connection and initialize the {@link Giveaways} module.",
     "access": "private",
     "async": true,
     "returns": [
      [
       [
        "Promise",
        "<"
       ],
       [
        "void",
        ">"
       ]
      ]
     ],
     "meta": {
      "line": 185,
      "file": "Giveaways.ts",
      "path": "src"
     }
    },
    {
     "name": "_sendUpdateMessage",
     "description": "Sends the {@link Giveaways} module update state in the console.",
     "access": "private",
     "async": true,
     "returns": [
      [
       [
        "Promise",
        "<"
       ],
       [
        "void",
        ">"
       ]
      ]
     ],
     "meta": {
      "line": 515,
      "file": "Giveaways.ts",
      "path": "src"
     }
    },
    {
     "name": "start",
     "description": "Starts the giveaway.",
     "params": [
      {
       "name": "giveawayOptions",
       "description": "{@link Giveaway} options.",
       "type": [
        [
         [
          "IGiveawayStartConfig"
         ]
        ]
       ]
      }
     ],
     "async": true,
     "returns": {
      "types": [
       [
        [
         "Promise",
         "<"
        ],
        [
         "Giveaway",
         "<"
        ],
        [
         "DatabaseType",
         ">>"
        ]
       ]
      ],
      "description": "Created {@link Giveaway} instance."
     },
     "meta": {
      "line": 559,
      "file": "Giveaways.ts",
      "path": "src"
     }
    },
    {
     "name": "find",
     "description": "Finds the giveaway in all giveaways database by the specified callback function.",
     "params": [
      {
       "name": "cb",
       "description": "The callback function to find the giveaway in the giveaways database.",
       "type": [
        [
         [
          "FindCallback",
          "<"
         ],
         [
          "Giveaway",
          "<"
         ],
         [
          "TDatabaseType",
          ">>"
         ]
        ]
       ]
      }
     ],
     "async": true,
     "returns": [
      [
       [
        "Promise",
        "<"
       ],
       [
        "Giveaway",
        "<"
       ],
       [
        "TDatabaseType",
        ">>"
       ]
      ]
     ],
     "meta": {
      "line": 747,
      "file": "Giveaways.ts",
      "path": "src"
     }
    },
    {
     "name": "getGuildGiveaways",
     "description": "Gets all the giveaways from the specified guild in database.",
     "params": [
      {
       "name": "guildID",
       "description": "Guild ID to get the giveaways from.",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      }
     ],
     "async": true,
     "returns": {
      "types": [
       [
        [
         "Promise",
         "<"
        ],
        [
         "Array",
         "<"
        ],
        [
         "Giveaway",
         "<"
        ],
        [
         "TDatabaseType",
         ">>>"
        ]
       ]
      ],
      "description": "Giveaways array from the specified guild in database."
     },
     "meta": {
      "line": 779,
      "file": "Giveaways.ts",
      "path": "src"
     }
    },
    {
     "name": "getAll",
     "description": "Gets all the giveaways from all the guilds in database.",
     "async": true,
     "returns": {
      "types": [
       [
        [
         "Promise",
         "<"
        ],
        [
         "Array",
         "<"
        ],
        [
         "Giveaway",
         "<"
        ],
        [
         "TDatabaseType",
         ">>>"
        ]
       ]
      ],
      "description": "Giveaways array from all the guilds in database."
     },
     "meta": {
      "line": 806,
      "file": "Giveaways.ts",
      "path": "src"
     }
    },
    {
     "name": "_checkGiveaways",
     "description": "Checks for all giveaways to be finished and end them if they are.",
     "access": "private",
     "async": true,
     "returns": [
      [
       [
        "Promise",
        "<"
       ],
       [
        "void",
        ">"
       ]
      ]
     ],
     "meta": {
      "line": 825,
      "file": "Giveaways.ts",
      "path": "src"
     }
    }
   ],
   "events": [
    {
     "name": "ready",
     "description": "Emits when the {@link Giveaways} module is ready.",
     "params": [
      {
       "name": "giveaways",
       "description": "Initialized {@link Giveaways} instance.",
       "type": [
        [
         [
          "Giveaways",
          "<"
         ],
         [
          "DatabaseType",
          ">"
         ]
        ]
       ]
      }
     ],
     "meta": {
      "line": 1364,
      "file": "Giveaways.ts",
      "path": "src"
     }
    },
    {
     "name": "databaseConnect",
     "description": "Emits when the {@link Giveaways} module establishes the database connection.",
     "params": [
      {
       "name": "databaseConnect",
       "description": "Initialized {@link Giveaways} instance.",
       "type": [
        [
         [
          "void"
         ]
        ]
       ]
      }
     ],
     "meta": {
      "line": 1370,
      "file": "Giveaways.ts",
      "path": "src"
     }
    },
    {
     "name": "giveawayStart",
     "description": "Emits when a giveaway is started.",
     "params": [
      {
       "name": "giveaway",
       "description": "{@link Giveaway} that started.",
       "type": [
        [
         [
          "Giveaway",
          "<"
         ],
         [
          "DatabaseType",
          ">"
         ]
        ]
       ]
      }
     ],
     "meta": {
      "line": 1376,
      "file": "Giveaways.ts",
      "path": "src"
     }
    },
    {
     "name": "giveawayRestart",
     "description": "Emits when a giveaway is restarted.",
     "params": [
      {
       "name": "giveaway",
       "description": "{@link Giveaway} that restarted.",
       "type": [
        [
         [
          "Giveaway",
          "<"
         ],
         [
          "DatabaseType",
          ">"
         ]
        ]
       ]
      }
     ],
     "meta": {
      "line": 1382,
      "file": "Giveaways.ts",
      "path": "src"
     }
    },
    {
     "name": "giveawayEnd",
     "description": "Emits when a giveaway is ended.",
     "params": [
      {
       "name": "giveaway",
       "description": "{@link Giveaway} that ended.",
       "type": [
        [
         [
          "Giveaway",
          "<"
         ],
         [
          "DatabaseType",
          ">"
         ]
        ]
       ]
      }
     ],
     "meta": {
      "line": 1388,
      "file": "Giveaways.ts",
      "path": "src"
     }
    },
    {
     "name": "giveawayReroll",
     "description": "Emits when a giveaway is rerolled.",
     "params": [
      {
       "name": "giveaway",
       "description": "{@link Giveaway} that was rerolled.",
       "type": [
        [
         [
          "IGiveawayRerollEvent"
         ]
        ]
       ]
      }
     ],
     "meta": {
      "line": 1394,
      "file": "Giveaways.ts",
      "path": "src"
     }
    }
   ],
   "meta": {
    "line": 44,
    "file": "Giveaways.ts",
    "path": "src"
   }
  },
  {
   "name": "Giveaway<TDatabaseType>",
   "description": "Class that represents the Giveaway object.\n\nType parameters:\n\n- `TDatabaseType` ({@link DatabaseType}) - The database type that will be used in the module.",
   "implements": [
    [
     [
      "IGiveaway",
      "<"
     ],
     [
      "DatabaseType",
      ">"
     ]
    ]
   ],
   "props": [
    {
     "name": "_giveaways",
     "description": "Giveaways instance.",
     "access": "private",
     "type": [
      [
       [
        "Giveaways",
        "<"
       ],
       [
        "DatabaseType",
        ">"
       ]
      ]
     ],
     "meta": {
      "line": 147,
      "file": "Giveaway.ts",
      "path": "src/lib"
     }
    },
    {
     "name": "_messageUtils",
     "description": "Message utils instance.",
     "access": "private",
     "type": [
      [
       [
        "MessageUtils"
       ]
      ]
     ],
     "meta": {
      "line": 154,
      "file": "Giveaway.ts",
      "path": "src/lib"
     }
    },
    {
     "name": "raw",
     "description": "Raw giveaway object.",
     "type": [
      [
       [
        "IGiveaway"
       ]
      ]
     ],
     "meta": {
      "line": 162,
      "file": "Giveaway.ts",
      "path": "src/lib"
     }
    },
    {
     "name": "id",
     "description": "Giveaway ID.",
     "type": [
      [
       [
        "number"
       ]
      ]
     ],
     "meta": {
      "line": 168,
      "file": "Giveaway.ts",
      "path": "src/lib"
     }
    },
    {
     "name": "prize",
     "description": "Giveaway prize.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ],
     "meta": {
      "line": 174,
      "file": "Giveaway.ts",
      "path": "src/lib"
     }
    },
    {
     "name": "time",
     "description": "Giveaway time.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ],
     "meta": {
      "line": 180,
      "file": "Giveaway.ts",
      "path": "src/lib"
     }
    },
    {
     "name": "state",
     "description": "Giveaway state.",
     "type": [
      [
       [
        "GiveawayState"
       ]
      ]
     ],
     "meta": {
      "line": 186,
      "file": "Giveaway.ts",
      "path": "src/lib"
     }
    },
    {
     "name": "winnersCount",
     "description": "Number of possible winners in the giveaway.",
     "type": [
      [
       [
        "number"
       ]
      ]
     ],
     "meta": {
      "line": 192,
      "file": "Giveaway.ts",
      "path": "src/lib"
     }
    },
    {
     "name": "startTimestamp",
     "description": "Giveaway start timestamp.",
     "type": [
      [
       [
        "number"
       ]
      ]
     ],
     "meta": {
      "line": 198,
      "file": "Giveaway.ts",
      "path": "src/lib"
     }
    },
    {
     "name": "endTimestamp",
     "description": "Giveaway end timestamp.",
     "type": [
      [
       [
        "number"
       ]
      ]
     ],
     "meta": {
      "line": 204,
      "file": "Giveaway.ts",
      "path": "src/lib"
     }
    },
    {
     "name": "messageID",
     "description": "Giveaway message ID.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ],
     "meta": {
      "line": 210,
      "file": "Giveaway.ts",
      "path": "src/lib"
     }
    },
    {
     "name": "guild",
     "description": "Guild where the giveaway was created.",
     "type": [
      [
       [
        "Guild"
       ]
      ]
     ],
     "meta": {
      "line": 216,
      "file": "Giveaway.ts",
      "path": "src/lib"
     }
    },
    {
     "name": "host",
     "description": "User who created the giveaway.",
     "type": [
      [
       [
        "User"
       ]
      ]
     ],
     "meta": {
      "line": 222,
      "file": "Giveaway.ts",
      "path": "src/lib"
     }
    },
    {
     "name": "channel",
     "description": "Channel where the giveaway was created.",
     "type": [
      [
       [
        "TextChannel"
       ]
      ]
     ],
     "meta": {
      "line": 228,
      "file": "Giveaway.ts",
      "path": "src/lib"
     }
    },
    {
     "name": "messageURL",
     "description": "Giveaway message URL.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ],
     "meta": {
      "line": 234,
      "file": "Giveaway.ts",
      "path": "src/lib"
     }
    },
    {
     "name": "isEnded",
     "description": "Determines if the giveaway was ended in database.",
     "type": [
      [
       [
        "boolean"
       ]
      ]
     ],
     "meta": {
      "line": 240,
      "file": "Giveaway.ts",
      "path": "src/lib"
     }
    },
    {
     "name": "entriesArray",
     "description": "Array of user IDs of users that have entered the giveaway.",
     "type": [
      [
       [
        "Array",
        "<"
       ],
       [
        "string",
        ">"
       ]
      ]
     ],
     "meta": {
      "line": 246,
      "file": "Giveaway.ts",
      "path": "src/lib"
     }
    },
    {
     "name": "entries",
     "description": "Number of giveaway entries.",
     "type": [
      [
       [
        "number"
       ]
      ]
     ],
     "meta": {
      "line": 252,
      "file": "Giveaway.ts",
      "path": "src/lib"
     }
    },
    {
     "name": "messageProps",
     "description": "Message data properties for embeds and buttons.",
     "type": [
      [
       [
        "IGiveawayMessageProps"
       ]
      ]
     ],
     "meta": {
      "line": 258,
      "file": "Giveaway.ts",
      "path": "src/lib"
     }
    },
    {
     "name": "isFinished",
     "description": "Determines if the giveaway's time is up or if the giveaway was ended forcefully.",
     "type": [
      [
       [
        "boolean"
       ]
      ]
     ],
     "meta": {
      "line": 292,
      "file": "Giveaway.ts",
      "path": "src/lib"
     }
    }
   ],
   "methods": [
    {
     "name": "restart",
     "description": "Restarts the giveaway.",
     "async": true,
     "returns": [
      [
       [
        "Promise",
        "<"
       ],
       [
        "void",
        ">"
       ]
      ]
     ],
     "meta": {
      "line": 300,
      "file": "Giveaway.ts",
      "path": "src/lib"
     }
    },
    {
     "name": "extendLength",
     "description": "Extends the giveaway length.",
     "params": [
      {
       "name": "extensionTime",
       "description": "The time to extend the giveaway length by.",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      }
     ],
     "async": true,
     "returns": [
      [
       [
        "Promise",
        "<"
       ],
       [
        "void",
        ">"
       ]
      ]
     ],
     "meta": {
      "line": 332,
      "file": "Giveaway.ts",
      "path": "src/lib"
     }
    },
    {
     "name": "reduceLength",
     "description": "Reduces the giveaway length.",
     "params": [
      {
       "name": "reductionTime",
       "description": "The time to reduce the giveaway length by.",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      }
     ],
     "async": true,
     "returns": [
      [
       [
        "Promise",
        "<"
       ],
       [
        "void",
        ">"
       ]
      ]
     ],
     "meta": {
      "line": 390,
      "file": "Giveaway.ts",
      "path": "src/lib"
     }
    },
    {
     "name": "end",
     "description": "Ends the giveaway.",
     "async": true,
     "returns": [
      [
       [
        "Promise",
        "<"
       ],
       [
        "void",
        ">"
       ]
      ]
     ],
     "meta": {
      "line": 448,
      "file": "Giveaway.ts",
      "path": "src/lib"
     }
    },
    {
     "name": "reroll",
     "description": "Redraws the giveaway winners",
     "async": true,
     "returns": {
      "types": [
       [
        [
         "Promise",
         "<"
        ],
        [
         "Array",
         "<"
        ],
        [
         "string",
         ">>"
        ]
       ]
      ],
      "description": "Rerolled winners users IDs."
     },
     "meta": {
      "line": 479,
      "file": "Giveaway.ts",
      "path": "src/lib"
     }
    },
    {
     "name": "addEntry",
     "description": "Adds the user ID into the giveaway entries.",
     "params": [
      {
       "name": "guildID",
       "description": "The guild ID where the giveaway is hosted.",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "userID",
       "description": "The user ID to add.",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      }
     ],
     "async": true,
     "returns": {
      "types": [
       [
        [
         "IGiveaway"
        ]
       ]
      ],
      "description": "Updated giveaway object."
     },
     "meta": {
      "line": 568,
      "file": "Giveaway.ts",
      "path": "src/lib"
     }
    },
    {
     "name": "removeEntry",
     "description": "Adds the user ID into the giveaway entries.",
     "params": [
      {
       "name": "guildID",
       "description": "The guild ID where the giveaway is hosted.",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "userID",
       "description": "The user ID to add.",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      }
     ],
     "async": true,
     "returns": {
      "types": [
       [
        [
         "IGiveaway"
        ]
       ]
      ],
      "description": "Updated giveaway object."
     },
     "meta": {
      "line": 568,
      "file": "Giveaway.ts",
      "path": "src/lib"
     }
    },
    {
     "name": "setPrize",
     "description": "Changes the giveaway's prize and edits the giveaway message.",
     "params": [
      {
       "name": "prize",
       "description": "The new prize to set.",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      }
     ],
     "async": true,
     "returns": {
      "types": [
       [
        [
         "Promise",
         "<"
        ],
        [
         "Giveaway",
         "<"
        ],
        [
         "TDatabaseType",
         ">>"
        ]
       ]
      ],
      "description": "Updated {@link Giveaway} instance."
     },
     "meta": {
      "line": 619,
      "file": "Giveaway.ts",
      "path": "src/lib"
     }
    },
    {
     "name": "setWinnersCount",
     "description": "Changes the giveaway's winners count and edits the giveaway message.",
     "params": [
      {
       "name": "winnersCount",
       "description": "The new winners count to set.",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      }
     ],
     "async": true,
     "returns": {
      "types": [
       [
        [
         "Promise",
         "<"
        ],
        [
         "Giveaway",
         "<"
        ],
        [
         "TDatabaseType",
         ">>"
        ]
       ]
      ],
      "description": "Updated {@link Giveaway} instance."
     },
     "meta": {
      "line": 644,
      "file": "Giveaway.ts",
      "path": "src/lib"
     }
    },
    {
     "name": "setHostMemberID",
     "description": "Changes the giveaway's host member ID and edits the giveaway message.",
     "params": [
      {
       "name": "hostMemberID",
       "description": "The new host member ID to set.",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      }
     ],
     "async": true,
     "returns": {
      "types": [
       [
        [
         "Promise",
         "<"
        ],
        [
         "Giveaway",
         "<"
        ],
        [
         "TDatabaseType",
         ">>"
        ]
       ]
      ],
      "description": "Updated {@link Giveaway} instance."
     },
     "meta": {
      "line": 669,
      "file": "Giveaway.ts",
      "path": "src/lib"
     }
    },
    {
     "name": "edit",
     "description": "Sets the specified value to the specified giveaway property and edits the giveaway message.",
     "params": [
      {
       "name": "key",
       "description": "The key of the giveaway object to set",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "value",
       "description": "The value to set.",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      }
     ],
     "async": true,
     "returns": {
      "types": [
       [
        [
         "Promise",
         "<"
        ],
        [
         "Giveaway",
         "<"
        ],
        [
         "DatabaseType",
         ">>"
        ]
       ]
      ],
      "description": "Updated {@link Giveaway} instance."
     },
     "meta": {
      "line": 694,
      "file": "Giveaway.ts",
      "path": "src/lib"
     }
    },
    {
     "name": "sync",
     "description": "Syncs the constructor properties with specified raw giveaway object.",
     "params": [
      {
       "name": "giveaway",
       "description": "Giveaway object to sync the constructor properties with.",
       "type": [
        [
         [
          "IGiveaway"
         ]
        ]
       ]
      }
     ],
     "returns": [
      [
       [
        "void"
       ]
      ]
     ],
     "meta": {
      "line": 755,
      "file": "Giveaway.ts",
      "path": "src/lib"
     }
    },
    {
     "name": "_pickWinners",
     "description": "Shuffles all the giveaway entries, randomly picks the winner user IDs and converts them into mentions.",
     "access": "private",
     "params": [
      {
       "name": "giveawayTySync",
       "description": "The giveaway object to sync with.",
       "optional": true,
       "type": [
        [
         [
          "IGiveaway"
         ]
        ]
       ]
      }
     ],
     "returns": {
      "types": [
       [
        [
         "Array",
         "<"
        ],
        [
         "string",
         ">"
        ]
       ]
      ],
      "description": "Array of mentions of users that were picked as the winners."
     },
     "meta": {
      "line": 787,
      "file": "Giveaway.ts",
      "path": "src/lib"
     }
    },
    {
     "name": "_shuffleArray",
     "description": "Shuffles an array and returns it.",
     "access": "private",
     "params": [
      {
       "name": "arrayToShuffle",
       "description": "Thr array to shuffle.",
       "type": [
        [
         [
          "Array",
          "<"
         ],
         [
          "any",
          ">"
         ]
        ]
       ]
      }
     ],
     "returns": {
      "types": [
       [
        [
         "Array",
         "<"
        ],
        [
         "any",
         ">"
        ]
       ]
      ],
      "description": "Shuffled array."
     },
     "meta": {
      "line": 826,
      "file": "Giveaway.ts",
      "path": "src/lib"
     }
    },
    {
     "name": "_getFromDatabase",
     "description": "Gets the giveaway data and its index in guild giveaways array from database.",
     "access": "private",
     "params": [
      {
       "name": "guildID",
       "description": "Guild ID to get the giveaways array from.",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      }
     ],
     "async": true,
     "returns": {
      "types": [
       [
        [
         "Promise",
         "<"
        ],
        [
         "IDatabaseGiveaway",
         ">"
        ]
       ]
      ],
      "description": "Database giveaway object."
     },
     "meta": {
      "line": 861,
      "file": "Giveaway.ts",
      "path": "src/lib"
     }
    },
    {
     "name": "_timeToSeconds",
     "description": "Converts the time string into seconds.",
     "access": "private",
     "params": [
      {
       "name": "time",
       "description": "The time string to convert.",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      }
     ],
     "returns": {
      "types": [
       [
        [
         "number"
        ]
       ]
      ],
      "description": "Converted time string into seconds."
     },
     "meta": {
      "line": 898,
      "file": "Giveaway.ts",
      "path": "src/lib"
     }
    },
    {
     "name": "toJSON",
     "description": "Converts the {@link Giveaway} instance to a plain object representation.",
     "returns": {
      "types": [
       [
        [
         "IGiveaway"
        ]
       ]
      ],
      "description": "Plain object representation of {@link Giveaway} instance."
     },
     "meta": {
      "line": 915,
      "file": "Giveaway.ts",
      "path": "src/lib"
     }
    }
   ],
   "meta": {
    "line": 14,
    "file": "Giveaway.ts",
    "path": "src/lib"
   }
  },
  {
   "name": "DatabaseManager",
   "description": "Database manager class.",
   "construct": {
    "name": "DatabaseManager",
    "description": "Database manager constructor.",
    "params": [
     {
      "name": "giveaways",
      "description": "Giveaways instance.",
      "type": [
       [
        [
         "Giveaways",
         "<"
        ],
        [
         "DatabaseType",
         ">"
        ]
       ]
      ]
     }
    ]
   },
   "props": [
    {
     "name": "giveaways",
     "description": "Giveaways instance.",
     "type": [
      [
       [
        "Giveaways",
        "<"
       ],
       [
        "DatabaseType",
        ">"
       ]
      ]
     ],
     "meta": {
      "line": 45,
      "file": "DatabaseManager.ts",
      "path": "src/lib/managers"
     }
    },
    {
     "name": "db",
     "description": "Database instance.",
     "type": [
      [
       [
        "Database",
        "<"
       ],
       [
        "DatabaseType",
        ">"
       ]
      ]
     ],
     "meta": {
      "line": 51,
      "file": "DatabaseManager.ts",
      "path": "src/lib/managers"
     }
    },
    {
     "name": "databaseType",
     "description": "Database type.",
     "type": [
      [
       [
        "DatabaseType"
       ]
      ]
     ],
     "meta": {
      "line": 57,
      "file": "DatabaseManager.ts",
      "path": "src/lib/managers"
     }
    },
    {
     "name": "jsonParser",
     "description": "JSON parser instance.",
     "type": [
      [
       [
        "JSONParser"
       ]
      ]
     ],
     "meta": {
      "line": 65,
      "file": "DatabaseManager.ts",
      "path": "src/lib/managers"
     }
    }
   ],
   "methods": [
    {
     "name": "getKeys",
     "description": "Gets the object keys in database root or in object by specified key.",
     "params": [
      {
       "name": "key",
       "description": "The key in database.",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      }
     ],
     "async": true,
     "returns": {
      "types": [
       [
        [
         "Array",
         "<"
        ],
        [
         "string",
         ">"
        ]
       ]
      ],
      "description": "Database object keys array."
     },
     "meta": {
      "line": 73,
      "file": "DatabaseManager.ts",
      "path": "src/lib/managers"
     }
    },
    {
     "name": "get",
     "description": "Gets the value from database by specified key.",
     "params": [
      {
       "name": "key",
       "description": "The key in database.",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      }
     ],
     "async": true,
     "returns": {
      "types": [
       [
        [
         "V"
        ]
       ]
      ],
      "description": "Value from database."
     },
     "meta": {
      "line": 83,
      "file": "DatabaseManager.ts",
      "path": "src/lib/managers"
     }
    },
    {
     "name": "fetch",
     "description": "Gets the value from database by specified key.\n\n- This method is an alias to {@link DatabaseManager.get()} method.",
     "params": [
      {
       "name": "key",
       "description": "The key in database.",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      }
     ],
     "async": true,
     "returns": {
      "types": [
       [
        [
         "V"
        ]
       ]
      ],
      "description": "Value from database."
     },
     "meta": {
      "line": 112,
      "file": "DatabaseManager.ts",
      "path": "src/lib/managers"
     }
    },
    {
     "name": "has",
     "description": "Determines if specified key exists in database.",
     "params": [
      {
       "name": "key",
       "description": "The key in database.",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      }
     ],
     "async": true,
     "returns": {
      "types": [
       [
        [
         "boolean"
        ]
       ]
      ],
      "description": "Boolean value that determines if specified key exists in database."
     },
     "meta": {
      "line": 124,
      "file": "DatabaseManager.ts",
      "path": "src/lib/managers"
     }
    },
    {
     "name": "includes",
     "description": "Determines if specified key exists in database.\n\n- This method is an alias to {@link DatabaseManager.has()} method.",
     "params": [
      {
       "name": "key",
       "description": "The key in database.",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      }
     ],
     "async": true,
     "returns": {
      "types": [
       [
        [
         "boolean"
        ]
       ]
      ],
      "description": "Boolean value that determines if specified key exists in database."
     },
     "meta": {
      "line": 134,
      "file": "DatabaseManager.ts",
      "path": "src/lib/managers"
     }
    },
    {
     "name": "set",
     "description": "Sets data in database.",
     "params": [
      {
       "name": "key",
       "description": "The key in database.",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "value",
       "description": "Any data to set.",
       "type": [
        [
         [
          "V"
         ]
        ]
       ]
      }
     ],
     "async": true,
     "returns": {
      "types": [
       [
        [
         "boolean"
        ]
       ]
      ],
      "description": "`true` if set successfully, `false` otherwise."
     },
     "meta": {
      "line": 145,
      "file": "DatabaseManager.ts",
      "path": "src/lib/managers"
     }
    },
    {
     "name": "clear",
     "description": "Clears the whole database.",
     "async": true,
     "returns": {
      "types": [
       [
        [
         "Promise",
         "<"
        ],
        [
         "boolean",
         ">"
        ]
       ]
      ],
      "description": "`true` if set successfully, `false` otherwise."
     },
     "meta": {
      "line": 177,
      "file": "DatabaseManager.ts",
      "path": "src/lib/managers"
     }
    },
    {
     "name": "deleteAll",
     "description": "Clears the whole database.\n\n- This method is an alias to {@link DatabaseManager.clear()} method.",
     "async": true,
     "returns": {
      "types": [
       [
        [
         "Promise",
         "<"
        ],
        [
         "boolean",
         ">"
        ]
       ]
      ],
      "description": "`true` if set successfully, `false` otherwise."
     },
     "meta": {
      "line": 205,
      "file": "DatabaseManager.ts",
      "path": "src/lib/managers"
     }
    },
    {
     "name": "add",
     "description": "Adds a number to the data in database.",
     "params": [
      {
       "name": "key",
       "description": "The key in database.",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "numberToAdd",
       "description": "Any number to add.",
       "type": [
        [
         [
          "number"
         ]
        ]
       ]
      }
     ],
     "async": true,
     "returns": {
      "types": [
       [
        [
         "boolean"
        ]
       ]
      ],
      "description": "`true` if added successfully, `false` otherwise."
     },
     "meta": {
      "line": 215,
      "file": "DatabaseManager.ts",
      "path": "src/lib/managers"
     }
    },
    {
     "name": "subtract",
     "description": "Subtracts a number to the data in database.",
     "params": [
      {
       "name": "key",
       "description": "The key in database.",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "numberToSubtract",
       "description": "Any number to subtract.",
       "type": [
        [
         [
          "number"
         ]
        ]
       ]
      }
     ],
     "async": true,
     "returns": {
      "types": [
       [
        [
         "boolean"
        ]
       ]
      ],
      "description": "`true` if subtracted successfully, `false` otherwise."
     },
     "meta": {
      "line": 271,
      "file": "DatabaseManager.ts",
      "path": "src/lib/managers"
     }
    },
    {
     "name": "delete",
     "description": "Deletes the data from database.",
     "params": [
      {
       "name": "key",
       "description": "The key in database.",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      }
     ],
     "async": true,
     "returns": {
      "types": [
       [
        [
         "boolean"
        ]
       ]
      ],
      "description": "`true` if deleted successfully, `false` otherwise."
     },
     "meta": {
      "line": 327,
      "file": "DatabaseManager.ts",
      "path": "src/lib/managers"
     }
    },
    {
     "name": "push",
     "description": "Pushes a value into specified array in database.",
     "params": [
      {
       "name": "key",
       "description": "The key in database.",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "value",
       "description": "Any value to push into database array.",
       "type": [
        [
         [
          "V"
         ]
        ]
       ]
      }
     ],
     "async": true,
     "returns": {
      "types": [
       [
        [
         "Promise",
         "<"
        ],
        [
         "boolean",
         ">"
        ]
       ]
      ],
      "description": "`true` if pushed successfully, `false` otherwise."
     },
     "meta": {
      "line": 357,
      "file": "DatabaseManager.ts",
      "path": "src/lib/managers"
     }
    },
    {
     "name": "pull",
     "description": "Changes the specified element's value in a specified array in the database.",
     "params": [
      {
       "name": "key",
       "description": "The key in database.",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "index",
       "description": "The index in the target array.",
       "type": [
        [
         [
          "number"
         ]
        ]
       ]
      },
      {
       "name": "newValue",
       "description": "The new value to set.",
       "type": [
        [
         [
          "V"
         ]
        ]
       ]
      }
     ],
     "async": true,
     "returns": {
      "types": [
       [
        [
         "Promise",
         "<"
        ],
        [
         "boolean",
         ">"
        ]
       ]
      ],
      "description": "`true` if pulled successfully, `false` otherwise."
     },
     "meta": {
      "line": 420,
      "file": "DatabaseManager.ts",
      "path": "src/lib/managers"
     }
    },
    {
     "name": "pop",
     "description": "Removes an element from a specified array in the database.",
     "params": [
      {
       "name": "key",
       "description": "The key in database.",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "index",
       "description": "The index in the target array.",
       "type": [
        [
         [
          "number"
         ]
        ]
       ]
      }
     ],
     "async": true,
     "returns": {
      "types": [
       [
        [
         "Promise",
         "<"
        ],
        [
         "boolean",
         ">"
        ]
       ]
      ],
      "description": "`true` if popped successfully, `false` otherwise."
     },
     "meta": {
      "line": 484,
      "file": "DatabaseManager.ts",
      "path": "src/lib/managers"
     }
    },
    {
     "name": "all",
     "description": "Gets the whole database object.",
     "async": true,
     "returns": {
      "types": [
       [
        [
         "Promise",
         "<"
        ],
        [
         "V",
         ">"
        ]
       ]
      ],
      "description": "Database object."
     },
     "meta": {
      "line": 546,
      "file": "DatabaseManager.ts",
      "path": "src/lib/managers"
     }
    }
   ],
   "meta": {
    "line": 7,
    "file": "DatabaseManager.ts",
    "path": "src/lib/managers"
   }
  }
 ],
 "interfaces": [],
 "typedefs": [
  {
   "name": "IGiveaway",
   "description": "An object that contains an information about a giveaway.",
   "type": [
    [
     [
      "object"
     ]
    ]
   ],
   "props": [
    {
     "name": "id",
     "description": "The ID of the giveaway.",
     "type": [
      [
       [
        "number"
       ]
      ]
     ]
    },
    {
     "name": "prize",
     "description": "The prize of the giveaway.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "time",
     "description": "The time of the giveaway.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "state",
     "description": "The state of the giveaway.",
     "type": [
      [
       [
        "GiveawayState"
       ]
      ]
     ]
    },
    {
     "name": "winnersCount",
     "description": "The number of possible winners in the giveaway.",
     "type": [
      [
       [
        "number"
       ]
      ]
     ]
    },
    {
     "name": "startTimestamp",
     "description": "The timestamp when the giveaway started.",
     "type": [
      [
       [
        "number"
       ]
      ]
     ]
    },
    {
     "name": "isEnded",
     "description": "Determines if the giveaway was ended in the database.",
     "type": [
      [
       [
        "boolean"
       ]
      ]
     ]
    },
    {
     "name": "endTimestamp",
     "description": "The timestamp when the giveaway ended.",
     "type": [
      [
       [
        "number"
       ]
      ]
     ]
    },
    {
     "name": "hostMemberID",
     "description": "The ID of the host member.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "channelID",
     "description": "The ID of the channel where the giveaway is held.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "messageID",
     "description": "The ID of the giveaway message.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "messageURL",
     "description": "The URL of the giveaway message.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "guildID",
     "description": "The ID of the guild where the giveaway is held.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "entries",
     "description": "The number of giveaway entries.",
     "type": [
      [
       [
        "number"
       ]
      ]
     ]
    },
    {
     "name": "entriesArray",
     "description": "The array of user IDs of users that have entered the giveaway.",
     "type": [
      [
       [
        "Array",
        "<"
       ],
       [
        "string",
        ">"
       ]
      ]
     ]
    },
    {
     "name": "messageProps",
     "description": "The message data properties for embeds and buttons.",
     "type": [
      [
       [
        "IGiveawayMessageProps"
       ]
      ]
     ]
    }
   ],
   "meta": {
    "line": 3,
    "file": "giveaway.interface.ts",
    "path": "src/lib"
   }
  },
  {
   "name": "IGiveawayRerollEmbeds",
   "description": "An interface containing embed objects for various giveaway reroll cases.",
   "type": [
    [
     [
      "object"
     ]
    ]
   ],
   "props": [
    {
     "name": "onlyHostCanReroll",
     "description": "The options for the embed when only the host can reroll.",
     "type": [
      [
       [
        "IGiveawayEmbedOptions"
       ]
      ]
     ]
    },
    {
     "name": "newGiveawayMessage",
     "description": "The options for the embed when sending a new giveaway message.",
     "type": [
      [
       [
        "IGiveawayEmbedOptions"
       ]
      ]
     ]
    },
    {
     "name": "successMessage",
     "description": "The options for the embed when the giveaway is successful.",
     "type": [
      [
       [
        "IGiveawayEmbedOptions"
       ]
      ]
     ]
    }
   ],
   "meta": {
    "line": 124,
    "file": "giveaway.interface.ts",
    "path": "src/lib"
   }
  },
  {
   "name": "IGiveawayFinishEmbeds",
   "description": "An interface containing embed objects for various giveaway finish cases.",
   "type": [
    [
     [
      "object"
     ]
    ]
   ],
   "props": [
    {
     "name": "newGiveawayMessage",
     "description": "The options for the embed when sending a new giveaway message.",
     "type": [
      [
       [
        "IGiveawayEmbedOptions"
       ]
      ]
     ]
    },
    {
     "name": "endMessage",
     "description": "The options for the embed when the giveaway has ended.",
     "type": [
      [
       [
        "IGiveawayEmbedOptions"
       ]
      ]
     ]
    },
    {
     "name": "noWinners",
     "description": "The options for the embed when there are no winners for the giveaway.",
     "type": [
      [
       [
        "IGiveawayEmbedOptions"
       ]
      ]
     ]
    },
    {
     "name": "noWinnersEndMessage",
     "description": "The options for the embed when there are no winners for the giveaway and it has ended.",
     "type": [
      [
       [
        "IGiveawayEmbedOptions"
       ]
      ]
     ]
    }
   ],
   "meta": {
    "line": 132,
    "file": "giveaway.interface.ts",
    "path": "src/lib"
   }
  },
  {
   "name": "IGiveawayMessageProps",
   "description": "An interface that contains the data properties for embeds and buttons.",
   "type": [
    [
     [
      "object"
     ]
    ]
   ],
   "props": [
    {
     "name": "embeds",
     "description": "The embed objects for the giveaway message.",
     "type": [
      [
       [
        "IGiveawayEmbeds"
       ]
      ]
     ]
    },
    {
     "name": "buttons",
     "description": "The button objects for the giveaway message.",
     "type": [
      [
       [
        "IGiveawayButtons"
       ]
      ]
     ]
    }
   ],
   "meta": {
    "line": 143,
    "file": "giveaway.interface.ts",
    "path": "src/lib"
   }
  },
  {
   "name": "IGiveawayEmbeds",
   "description": "An interface containing different types of giveaway embeds in the IGiveaways class.",
   "type": [
    [
     [
      "object"
     ]
    ]
   ],
   "props": [
    {
     "name": "start",
     "description": "Message embed data for cases when the giveaway has started.",
     "type": [
      [
       [
        "IGiveawayEmbedOptions"
       ]
      ]
     ]
    },
    {
     "name": "joinGiveawayMessage",
     "description": "The message to reply to user with when they join the giveaway.",
     "type": [
      [
       [
        "IGiveawayEmbedOptions"
       ]
      ]
     ]
    },
    {
     "name": "leaveGiveawayMejoinGiveawayMessage",
     "description": "The message to reply to user with when they leave the giveaway.",
     "type": [
      [
       [
        "IGiveawayEmbedOptions"
       ]
      ]
     ]
    },
    {
     "name": "reroll",
     "description": "Message embed data for cases when rerolling the giveaway.",
     "type": [
      [
       [
        "IGiveawayRerollEmbeds"
       ]
      ]
     ]
    },
    {
     "name": "finish",
     "description": "Message embed data for cases when the giveaway has finished.",
     "type": [
      [
       [
        "IGiveawayFinishEmbeds"
       ]
      ]
     ]
    }
   ],
   "meta": {
    "line": 164,
    "file": "giveaway.interface.ts",
    "path": "src/lib"
   }
  },
  {
   "name": "IGiveawayFinishMessages",
   "description": "An object that contains messages that are sent in various giveaway cases, such as end with winners or without winners.",
   "type": [
    [
     [
      "object"
     ]
    ]
   ],
   "props": [
    {
     "name": "newGiveawayMessage",
     "description": "The separated message to be sent in the giveaway channel when giveaway ends.",
     "type": [
      [
       [
        "IGiveawayEmbedOptions"
       ]
      ]
     ]
    },
    {
     "name": "endMessage",
     "description": "The separated message to be sent in the giveaway channel when a giveaway ends with winners.",
     "type": [
      [
       [
        "IGiveawayEmbedOptions"
       ]
      ]
     ]
    },
    {
     "name": "noWinners",
     "description": "The message that will be set to the original giveaway message if there are no winners in the giveaway.",
     "type": [
      [
       [
        "IGiveawayEmbedOptions"
       ]
      ]
     ]
    },
    {
     "name": "noWinnersEndMessage",
     "description": "The separated message to be sent in the giveaway channel if there are no winners in the giveaway.",
     "type": [
      [
       [
        "IGiveawayEmbedOptions"
       ]
      ]
     ]
    }
   ],
   "meta": {
    "line": 902,
    "file": "Giveaways.ts",
    "path": "src"
   }
  },
  {
   "name": "GiveawayFinishCallback",
   "description": "A function that is called when giveaway is finished.",
   "type": [
    [
     [
      "function"
     ]
    ]
   ],
   "params": [
    {
     "name": "winnersString",
     "description": "A string that contains the users that won the giveaway separated with comma.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "winnersCount",
     "description": "Number of winners that were picked.",
     "type": [
      [
       [
        "number"
       ]
      ]
     ]
    }
   ],
   "returns": {
    "types": [
     [
      [
       "IGiveawayFinishMessages"
      ]
     ]
    ],
    "description": "Giveaway message objects."
   },
   "meta": {
    "line": 918,
    "file": "Giveaways.ts",
    "path": "src"
   }
  },
  {
   "name": "IGiveawayRerollMessages",
   "description": "An object that contains messages that are sent in various giveaway cases, such as end with winners or without winners.",
   "type": [
    [
     [
      "object"
     ]
    ]
   ],
   "props": [
    {
     "name": "onlyHostCanReroll",
     "description": "The message to reply to user with when not a giveaway host tries to do a reroll.",
     "type": [
      [
       [
        "IGiveawayEmbedOptions"
       ]
      ]
     ]
    },
    {
     "name": "newGiveawayMessage",
     "description": "The message that will be set to the original giveaway message after the reroll.",
     "type": [
      [
       [
        "IGiveawayEmbedOptions"
       ]
      ]
     ]
    },
    {
     "name": "successMessage",
     "description": "The separated message to be sent in the giveaway channel when the reroll is successful.",
     "type": [
      [
       [
        "IGiveawayEmbedOptions"
       ]
      ]
     ]
    }
   ],
   "meta": {
    "line": 926,
    "file": "Giveaways.ts",
    "path": "src"
   }
  },
  {
   "name": "GiveawayRerollCallback",
   "description": "A function that is called when giveaway winners are rerolled.",
   "type": [
    [
     [
      "function"
     ]
    ]
   ],
   "params": [
    {
     "name": "winnersMentionsString",
     "description": "A string that contains the mentions of users that won the giveaway, separated with comma.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "winnersCount",
     "description": "Number of winners that were picked.",
     "type": [
      [
       [
        "number"
       ]
      ]
     ]
    }
   ],
   "returns": {
    "types": [
     [
      [
       "IGiveawayRerollMessages"
      ]
     ]
    ],
    "description": "Giveaway message objects."
   },
   "meta": {
    "line": 940,
    "file": "Giveaways.ts",
    "path": "src"
   }
  },
  {
   "name": "IGiveawayMessageButtons",
   "description": "An object that contains the giveaway buttons that may be set up.",
   "type": [
    [
     [
      "object"
     ]
    ]
   ],
   "props": [
    {
     "name": "joinGiveawayButton",
     "description": "The options for the join giveaway button.",
     "type": [
      [
       [
        "IGiveawayButtonOptions"
       ]
      ]
     ]
    },
    {
     "name": "rerollButton",
     "description": "The options for the reroll button.",
     "type": [
      [
       [
        "IGiveawayButtonOptions"
       ]
      ]
     ]
    },
    {
     "name": "goToMessageButton",
     "description": "The options for the go to message button.",
     "type": [
      [
       [
        "IGiveawayButtonOptions"
       ]
      ]
     ]
    }
   ],
   "meta": {
    "line": 215,
    "file": "giveaway.interface.ts",
    "path": "src/lib"
   }
  },
  {
   "name": "GiveawayWithoutInternalProps",
   "description": "An object that contains an information about a giveaway without internal props.",
   "type": [
    [
     [
      "object"
     ]
    ]
   ],
   "props": [
    {
     "name": "id",
     "description": "The ID of the giveaway.",
     "type": [
      [
       [
        "number"
       ]
      ]
     ]
    },
    {
     "name": "prize",
     "description": "The prize of the giveaway.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "time",
     "description": "The time of the giveaway.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "winnersCount",
     "description": "The number of possible winners in the giveaway.",
     "type": [
      [
       [
        "number"
       ]
      ]
     ]
    },
    {
     "name": "startTimestamp",
     "description": "The timestamp when the giveaway started.",
     "type": [
      [
       [
        "number"
       ]
      ]
     ]
    },
    {
     "name": "endTimestamp",
     "description": "The timestamp when the giveaway ended.",
     "type": [
      [
       [
        "number"
       ]
      ]
     ]
    },
    {
     "name": "hostMemberID",
     "description": "The ID of the host member.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "channelID",
     "description": "The ID of the channel where the giveaway is held.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "messageID",
     "description": "The ID of the giveaway message.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "messageURL",
     "description": "The URL of the giveaway message.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "guildID",
     "description": "The ID of the guild where the giveaway is held.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "entriesArray",
     "description": "The array of user IDs of users that have entered the giveaway.",
     "type": [
      [
       [
        "Array",
        "<"
       ],
       [
        "string",
        ">"
       ]
      ]
     ]
    },
    {
     "name": "messageProps",
     "description": "The message data properties for embeds and buttons.",
     "type": [
      [
       [
        "IGiveawayMessageProps"
       ]
      ]
     ]
    }
   ],
   "meta": {
    "line": 227,
    "file": "giveaway.interface.ts",
    "path": "src/lib"
   }
  },
  {
   "name": "GiveawayState",
   "description": "An enum that determines the state of a giveaway.",
   "type": [
    [
     [
      "number"
     ]
    ]
   ],
   "props": [
    {
     "name": "STARTED",
     "description": "The giveaway has started.",
     "type": [
      [
       [
        "number"
       ]
      ]
     ]
    },
    {
     "name": "ENDED",
     "description": "The giveaway has ended.",
     "type": [
      [
       [
        "number"
       ]
      ]
     ]
    }
   ],
   "meta": {
    "line": 249,
    "file": "giveaway.interface.ts",
    "path": "src/lib"
   }
  },
  {
   "name": "IGiveawaysConfiguration<TDatabaseType>",
   "description": "Full {@link Giveaways} class configuration object.\n\nType parameters:\n\n- `TDatabaseType` ({@link DatabaseType}) - Database type that will determine which connection configuration should be used.",
   "type": [
    [
     [
      "object"
     ]
    ]
   ],
   "props": [
    {
     "name": "database",
     "description": "Database type to use.",
     "type": [
      [
       [
        "DatabaseType"
       ]
      ]
     ]
    },
    {
     "name": "connection",
     "description": "Database type to use.",
     "type": [
      [
       [
        "DatabaseConnectionOptions"
       ]
      ]
     ]
    },
    {
     "name": "giveawaysCheckingInterval",
     "description": "Determines how often the giveaways ending state will be checked (in ms). Default: 1000.",
     "optional": true,
     "default": 1000,
     "nullable": true,
     "type": [
      [
       [
        "number"
       ]
      ]
     ]
    },
    {
     "name": "debug",
     "description": "Determines if debug mode is enabled. Default: false.",
     "optional": true,
     "default": false,
     "nullable": true,
     "type": [
      [
       [
        "boolean"
       ]
      ]
     ]
    },
    {
     "name": "minGiveawayEntries",
     "description": "Determines the minimum required giveaway entries to draw the winner. Default: 1",
     "optional": true,
     "default": 1,
     "nullable": true,
     "type": [
      [
       [
        "number"
       ]
      ]
     ]
    },
    {
     "name": "updatesChecker",
     "description": "Updates checker configuration.",
     "optional": true,
     "type": [
      [
       [
        "Partial"
       ]
      ]
     ]
    },
    {
     "name": "configurationChecker",
     "description": "Giveaways config checker configuration.",
     "optional": true,
     "type": [
      [
       [
        "Partial"
       ]
      ]
     ]
    }
   ],
   "meta": {
    "line": 986,
    "file": "Giveaways.ts",
    "path": "src"
   }
  },
  {
   "name": "IGiveawaysOptionalConfiguration",
   "description": "Optional configuration for the {@link Giveaways} class.",
   "type": [
    [
     [
      "object"
     ]
    ]
   ],
   "props": [
    {
     "name": "giveawaysCheckingInterval",
     "description": "Determines how often the giveaways ending state will be checked (in ms). Default: 1000.",
     "optional": true,
     "default": 1000,
     "nullable": true,
     "type": [
      [
       [
        "number"
       ]
      ]
     ]
    },
    {
     "name": "debug",
     "description": "Determines if debug mode is enabled. Default: false.",
     "optional": true,
     "default": false,
     "nullable": true,
     "type": [
      [
       [
        "boolean"
       ]
      ]
     ]
    },
    {
     "name": "minGiveawayEntries",
     "description": "Determines the minimum required giveaway entries to draw the winner. Default: 1",
     "optional": true,
     "default": 1,
     "nullable": true,
     "type": [
      [
       [
        "number"
       ]
      ]
     ]
    },
    {
     "name": "updatesChecker",
     "description": "Updates checker configuration.",
     "optional": true,
     "type": [
      [
       [
        "Partial"
       ]
      ]
     ]
    },
    {
     "name": "configurationChecker",
     "description": "Giveaways config checker configuration.",
     "optional": true,
     "type": [
      [
       [
        "Partial"
       ]
      ]
     ]
    }
   ],
   "meta": {
    "line": 1009,
    "file": "Giveaways.ts",
    "path": "src"
   }
  },
  {
   "name": "IUpdateCheckerConfiguration",
   "description": "Configuration for the updates checker.",
   "type": [
    [
     [
      "object"
     ]
    ]
   ],
   "props": [
    {
     "name": "checkUpdates",
     "description": "Sends the update state message in console on start. Default: true.",
     "optional": true,
     "default": true,
     "nullable": true,
     "type": [
      [
       [
        "boolean"
       ]
      ]
     ]
    },
    {
     "name": "upToDateMessage",
     "description": "Sends the message in console on start if module is up to date. Default: false.",
     "optional": true,
     "default": false,
     "nullable": true,
     "type": [
      [
       [
        "boolean"
       ]
      ]
     ]
    }
   ],
   "meta": {
    "line": 1022,
    "file": "Giveaways.ts",
    "path": "src"
   }
  },
  {
   "name": "IGiveawaysConfigCheckerConfiguration",
   "description": "Configuration for the configuration checker.",
   "type": [
    [
     [
      "object"
     ]
    ]
   ],
   "props": [
    {
     "name": "ignoreInvalidTypes",
     "description": "Allows the method to ignore the options with invalid types. Default: false.",
     "nullable": true,
     "type": [
      [
       [
        "boolean"
       ]
      ]
     ]
    },
    {
     "name": "ignoreUnspecifiedOptions",
     "description": "Allows the method to ignore the unspecified options. Default: true.",
     "nullable": true,
     "type": [
      [
       [
        "boolean"
       ]
      ]
     ]
    },
    {
     "name": "ignoreInvalidOptions",
     "description": "Allows the method to ignore the unexisting options. Default: false.",
     "nullable": true,
     "type": [
      [
       [
        "boolean"
       ]
      ]
     ]
    },
    {
     "name": "showProblems",
     "description": "Allows the method to show all the problems in the console. Default: true.",
     "nullable": true,
     "type": [
      [
       [
        "boolean"
       ]
      ]
     ]
    },
    {
     "name": "sendLog",
     "description": "Allows the method to send the result in the console.\nRequires the 'showProblems' or 'sendLog' options to set. Default: true.",
     "nullable": true,
     "type": [
      [
       [
        "boolean"
       ]
      ]
     ]
    },
    {
     "name": "sendSuccessLog",
     "description": "Allows the method to send the result if no problems were found. Default: false.",
     "nullable": true,
     "type": [
      [
       [
        "boolean"
       ]
      ]
     ]
    }
   ],
   "meta": {
    "line": 1029,
    "file": "Giveaways.ts",
    "path": "src"
   }
  },
  {
   "name": "IJSONDatabaseConfiguration",
   "description": "JSON database configuration.",
   "type": [
    [
     [
      "object"
     ]
    ]
   ],
   "props": [
    {
     "name": "path",
     "description": "Full path to a JSON storage file. Default: './giveaways.json'.",
     "optional": true,
     "default": "'./giveaways.json'",
     "nullable": true,
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "checkDatabase",
     "description": "Checks the if there are errors in database file. Default: true.",
     "optional": true,
     "default": true,
     "nullable": true,
     "type": [
      [
       [
        "boolean"
       ]
      ]
     ]
    },
    {
     "name": "checkingCountdown",
     "description": "Determines how often the database file will be checked (in ms). Default: 1000.",
     "optional": true,
     "default": 1000,
     "nullable": true,
     "type": [
      [
       [
        "number"
       ]
      ]
     ]
    }
   ],
   "meta": {
    "line": 1148,
    "file": "Giveaways.ts",
    "path": "src"
   }
  },
  {
   "name": "IGiveawayData",
   "description": "An object that contains an information about a giveaway that is required fo starting..",
   "type": [
    [
     [
      "object"
     ]
    ]
   ],
   "props": [
    {
     "name": "prize",
     "description": "The prize of the giveaway.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "time",
     "description": "The time of the giveaway.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "winnersCount",
     "description": "The number of possible winners in the giveaway.",
     "type": [
      [
       [
        "number"
       ]
      ]
     ]
    },
    {
     "name": "hostMemberID",
     "description": "The ID of the host member.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "channelID",
     "description": "The ID of the channel where the giveaway is held.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "guildID",
     "description": "The ID of the guild where the giveaway is held.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    }
   ],
   "meta": {
    "line": 1049,
    "file": "Giveaways.ts",
    "path": "src"
   }
  },
  {
   "name": "IGiveawayStartConfig",
   "description": "Giveaway start config.",
   "type": [
    [
     [
      "object"
     ]
    ]
   ],
   "props": [
    {
     "name": "prize",
     "description": "The prize of the giveaway.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "time",
     "description": "The time of the giveaway.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "winnersCount",
     "description": "The number of possible winners in the giveaway.",
     "type": [
      [
       [
        "number"
       ]
      ]
     ]
    },
    {
     "name": "hostMemberID",
     "description": "The ID of the host member.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "channelID",
     "description": "The ID of the channel where the giveaway is held.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "guildID",
     "description": "The ID of the guild where the giveaway is held.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "buttons",
     "description": "Giveaway buttons object.",
     "optional": true,
     "type": [
      [
       [
        "IGiveawayButtons"
       ]
      ]
     ]
    },
    {
     "name": "defineEmbedStrings",
     "description": "Giveaway buttons object.",
     "optional": true,
     "type": [
      [
       [
        "IGiveawayButtons"
       ]
      ]
     ]
    }
   ],
   "meta": {
    "line": 1060,
    "file": "Giveaways.ts",
    "path": "src"
   }
  },
  {
   "name": "IGiveawayButtons",
   "description": "Giveaway buttons that may be specified.",
   "type": [
    [
     [
      "object"
     ]
    ]
   ],
   "props": [
    {
     "name": "joinGiveawayButton",
     "description": "Button object for the \"join giveaway\" button.",
     "optional": true,
     "nullable": true,
     "type": [
      [
       [
        "IGiveawayButtonOptions"
       ]
      ]
     ]
    },
    {
     "name": "rerollButton",
     "description": "Button object for the \"reroll\" button.",
     "optional": true,
     "nullable": true,
     "type": [
      [
       [
        "IGiveawayButtonOptions"
       ]
      ]
     ]
    },
    {
     "name": "goToMessageButton",
     "description": "Link button object for the \"go to message\" button.",
     "optional": true,
     "nullable": true,
     "type": [
      [
       [
        "ILinkButton"
       ]
      ]
     ]
    }
   ],
   "meta": {
    "line": 1073,
    "file": "Giveaways.ts",
    "path": "src"
   }
  },
  {
   "name": "ILinkButton",
   "description": "Link button object.\n\nPlease note that URL is not required as it's being applied after starting the giveaway.",
   "type": [
    [
     [
      "object"
     ]
    ]
   ],
   "props": [
    {
     "name": "text",
     "description": "Button text string.",
     "optional": true,
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "emoji",
     "description": "Emoji string.",
     "optional": true,
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "url",
     "description": "URL that the button will take to.",
     "type": [
      [
       [
        "ButtonStyle"
       ]
      ]
     ]
    }
   ],
   "meta": {
    "line": 1081,
    "file": "Giveaways.ts",
    "path": "src"
   }
  },
  {
   "name": "DefineEmbedStringsCallback",
   "description": "A function that defines the embed strings used in the giveaway.",
   "type": [
    [
     [
      "function"
     ]
    ]
   ],
   "params": [
    {
     "name": "giveaway",
     "description": "An object containing information about the giveaway.",
     "type": [
      [
       [
        "Omit"
       ]
      ]
     ]
    },
    {
     "name": "giveawayHost",
     "description": "The host of the giveaway.",
     "type": [
      [
       [
        "User"
       ]
      ]
     ]
    }
   ],
   "returns": {
    "types": [
     [
      [
       "Partial"
      ]
     ]
    ],
    "description": "- An object containing the defined embed strings."
   },
   "meta": {
    "line": 1091,
    "file": "Giveaways.ts",
    "path": "src"
   }
  },
  {
   "name": "IGiveawayStartOptions",
   "description": "Giveaway start options.",
   "type": [
    [
     [
      "object"
     ]
    ]
   ],
   "props": [
    {
     "name": "buttons",
     "description": "Giveaway buttons object.",
     "optional": true,
     "type": [
      [
       [
        "IGiveawayButtons"
       ]
      ]
     ]
    },
    {
     "name": "defineEmbedStrings",
     "description": "Giveaway buttons object.",
     "optional": true,
     "type": [
      [
       [
        "IGiveawayButtons"
       ]
      ]
     ]
    }
   ],
   "meta": {
    "line": 1099,
    "file": "Giveaways.ts",
    "path": "src"
   }
  },
  {
   "name": "IEmbedStringsDefinitions",
   "description": "Object containing embed string definitions used in the IGiveaways class.",
   "type": [
    [
     [
      "object"
     ]
    ]
   ],
   "props": [
    {
     "name": "start",
     "description": "This object is used in the original giveaway message that people will use to join the giveaway.",
     "type": [
      [
       [
        "IGiveawayEmbedOptions"
       ]
      ]
     ]
    },
    {
     "name": "finish",
     "description": "This function is called and all returned message objects are extracted and used when the giveaway is finished.",
     "type": [
      [
       [
        "GiveawayFinishCallback"
       ]
      ]
     ]
    },
    {
     "name": "reroll",
     "description": "This function is called and all returned message objects are extracted and used when the giveaway winners are rerolled.",
     "type": [
      [
       [
        "GiveawayRerollCallback"
       ]
      ]
     ]
    }
   ],
   "meta": {
    "line": 1106,
    "file": "Giveaways.ts",
    "path": "src"
   }
  },
  {
   "name": "IGiveawayButtonOptions",
   "description": "Button object.",
   "type": [
    [
     [
      "object"
     ]
    ]
   ],
   "props": [
    {
     "name": "text",
     "description": "Button text string.",
     "optional": true,
     "nullable": true,
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "emoji",
     "description": "Emoji string.",
     "optional": true,
     "nullable": true,
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "style",
     "description": "Button style.",
     "optional": true,
     "nullable": true,
     "type": [
      [
       [
        "ButtonStyle"
       ]
      ]
     ]
    }
   ],
   "meta": {
    "line": 1120,
    "file": "Giveaways.ts",
    "path": "src"
   }
  },
  {
   "name": "IGiveawayEmbedOptions",
   "description": "Message embed options.",
   "type": [
    [
     [
      "object"
     ]
    ]
   ],
   "props": [
    {
     "name": "messageContent",
     "description": "Message content to specify in the message.\nIf only message content is specified, it will be sent without the embed.",
     "optional": true,
     "nullable": true,
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "title",
     "description": "The title of the embed.",
     "optional": true,
     "nullable": true,
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "titleIcon",
     "description": "The icon of the title in the embed.",
     "optional": true,
     "nullable": true,
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "titleURL",
     "description": "The url of the icon of the title in the embed.",
     "optional": true,
     "nullable": true,
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "description",
     "description": "The description of the embed.",
     "optional": true,
     "nullable": true,
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "footer",
     "description": "The footer of the embed.",
     "optional": true,
     "nullable": true,
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "footerIcon",
     "description": "The icon of the footer in the embed.",
     "optional": true,
     "nullable": true,
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "thumbnailURL",
     "description": "Embed thumbnail.",
     "optional": true,
     "nullable": true,
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "imageURL",
     "description": "Embed Image URL.",
     "optional": true,
     "nullable": true,
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "color",
     "description": "The color of the embed.",
     "optional": true,
     "nullable": true,
     "type": [
      [
       [
        "ColorResolvable"
       ]
      ]
     ]
    },
    {
     "name": "timestamp",
     "description": "The embed timestamp to set.",
     "optional": true,
     "nullable": true,
     "type": [
      [
       [
        "number"
       ]
      ]
     ]
    }
   ],
   "meta": {
    "line": 1128,
    "file": "Giveaways.ts",
    "path": "src"
   }
  },
  {
   "name": "DatabaseConnectionOptions<TDatabaseType>",
   "description": "Database connection options based on the used database type.\n\nType parameters:\n\n- `TDatabaseType` ({@link DatabaseType}) - Database type that will\ndetermine which connection configuration should be used.",
   "see": [
    "Partial<IJSONDatabaseConfiguration> - JSON configuration.",
    "EnmapOptions<any, any> - Enmap configuration.",
    "IMongoConnectionOptions - MongoDB connection configuration."
   ],
   "type": [
    [
     [
      "Partial",
      "<"
     ],
     [
      "IJSONDatabaseConfiguration",
      ">"
     ]
    ],
    [
     [
      "EnmapOptions",
      "<"
     ],
     [
      "any",
      ", "
     ],
     [
      "any",
      ">"
     ]
    ],
    [
     [
      "IMongoConnectionOptions"
     ]
    ]
   ],
   "meta": {
    "line": 1156,
    "file": "Giveaways.ts",
    "path": "src"
   }
  },
  {
   "name": "Database<TDatabaseType>",
   "description": "External database object based on the used database type.\n\nType parameters:\n\n- `TDatabaseType` ({@link DatabaseType}) - Database type that will determine which connection configuration should be used.",
   "see": [
    "null - JSON database management object - `null`\nis because it's not an external database - JSON is being parsed by the module itself.",
    "Enmap<string, IDatabaseStructure> - Enmap database.",
    "Mongo<{IDatabaseStructure> - MongoDB database."
   ],
   "type": [
    [
     [
      "null"
     ]
    ],
    [
     [
      "Enmap",
      "<"
     ],
     [
      "string",
      ", "
     ],
     [
      "IDatabaseStructure",
      ">"
     ]
    ],
    [
     [
      "Mongo",
      "<"
     ],
     [
      "IDatabaseStructure",
      ">"
     ]
    ]
   ],
   "meta": {
    "line": 1178,
    "file": "Giveaways.ts",
    "path": "src"
   }
  },
  {
   "name": "IDatabaseStructure",
   "description": "An interface containing the structure of the database used in the IGiveaways class.",
   "type": [
    [
     [
      "object"
     ]
    ]
   ],
   "props": [
    {
     "name": "guildID",
     "description": "Guild ID that stores the giveaways array",
     "type": [
      [
       [
        "any"
       ]
      ]
     ]
    },
    {
     "name": "giveaways",
     "description": "Giveaways array property inside the [guildID] object in database.",
     "type": [
      [
       [
        "Array",
        "<"
       ],
       [
        "IGiveaway",
        ">"
       ]
      ]
     ]
    }
   ],
   "meta": {
    "line": 1201,
    "file": "Giveaways.ts",
    "path": "src"
   }
  },
  {
   "name": "IDatabaseGiveaway",
   "description": "The giveaway data that stored in database,",
   "type": [
    [
     [
      "object"
     ]
    ]
   ],
   "props": [
    {
     "name": "giveaway",
     "description": "Giveaway object.",
     "type": [
      [
       [
        "IGiveaway"
       ]
      ]
     ]
    },
    {
     "name": "giveawayIndex",
     "description": "Giveaway index in the guild giveaways array.",
     "type": [
      [
       [
        "number"
       ]
      ]
     ]
    }
   ],
   "meta": {
    "line": 1208,
    "file": "Giveaways.ts",
    "path": "src"
   }
  },
  {
   "name": "IGiveawaysEvents<TDatabaseType>",
   "description": "A type containing all the {@link Giveaways} events and their return types.\n\nType parameters:\n\n- `TDatabaseType` ({@link DatabaseType}) - The database type that will be used in the module.",
   "type": [
    [
     [
      "object"
     ]
    ]
   ],
   "props": [
    {
     "name": "ready",
     "description": "Emits when the {@link Giveaways} is ready.",
     "type": [
      [
       [
        "Giveaways",
        "<"
       ],
       [
        "DatabaseType",
        ">"
       ]
      ]
     ]
    },
    {
     "name": "databaseConnect",
     "description": "Emits when the connection to the database is established.",
     "type": [
      [
       [
        "void"
       ]
      ]
     ]
    },
    {
     "name": "giveawayStart",
     "description": "Emits when a giveaway is started.",
     "type": [
      [
       [
        "Giveaway",
        "<"
       ],
       [
        "DatabaseType",
        ">"
       ]
      ]
     ]
    },
    {
     "name": "giveawayRestart",
     "description": "Emits when a giveaway is rerolled.",
     "type": [
      [
       [
        "Giveaway",
        "<"
       ],
       [
        "DatabaseType",
        ">"
       ]
      ]
     ]
    },
    {
     "name": "giveawayEnd",
     "description": "Emits when a giveaway is rerolled.",
     "type": [
      [
       [
        "Giveaway",
        "<"
       ],
       [
        "DatabaseType",
        ">"
       ]
      ]
     ]
    },
    {
     "name": "giveawayReroll",
     "description": "Emits when a giveaway is rerolled.",
     "type": [
      [
       [
        "IGiveawayRerollEvent"
       ]
      ]
     ]
    }
   ],
   "meta": {
    "line": 1216,
    "file": "Giveaways.ts",
    "path": "src"
   }
  },
  {
   "name": "IGiveawayRerollEvent<TDatabaseType>",
   "description": "Giveaway reroll event object.\n\nType parameters:\n\n- `TDatabaseType` ({@link DatabaseType}) - The database type that will be used in the module.",
   "type": [
    [
     [
      "object"
     ]
    ]
   ],
   "props": [
    {
     "name": "giveaway",
     "description": "Giveaway instance.",
     "type": [
      [
       [
        "Giveaway",
        "<"
       ],
       [
        "DatabaseType",
        ">"
       ]
      ]
     ]
    },
    {
     "name": "newWinners",
     "description": "Array of the new picked winners after reroll.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    }
   ],
   "meta": {
    "line": 1234,
    "file": "Giveaways.ts",
    "path": "src"
   }
  },
  {
   "name": "IGiveawayTimeChangeEvent",
   "description": "Giveaway time change event object.\n\nType parameters:\n\n- TDatabaseType ({@link DatabaseType}) - The database type that will be used in the module.",
   "type": [
    [
     [
      "object"
     ]
    ]
   ],
   "props": [
    {
     "name": "time",
     "description": "The time that affected the giveaway's length.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "giveaway",
     "description": "Giveaway instance.",
     "type": [
      [
       [
        "Giveaway",
        "<"
       ],
       [
        "DatabaseType",
        ">"
       ]
      ]
     ]
    }
   ],
   "meta": {
    "line": 1248,
    "file": "Giveaways.ts",
    "path": "src"
   }
  },
  {
   "name": "ILoggerColors",
   "description": "An interface containing different colors that may be used in a logger.",
   "type": [
    [
     [
      "object"
     ]
    ]
   ],
   "props": [
    {
     "name": "red",
     "description": "The color red.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "green",
     "description": "The color green.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "yellow",
     "description": "The color yellow.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "blue",
     "description": "The color blue.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "magenta",
     "description": "The color magenta.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "cyan",
     "description": "The color cyan.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "white",
     "description": "The color white.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "reset",
     "description": "The reset color.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "black",
     "description": "The color black.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "lightgray",
     "description": "The color light gray.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "default",
     "description": "The default color.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "darkgray",
     "description": "The color dark gray.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "lightred",
     "description": "The color light red.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "lightgreen",
     "description": "The color light green.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "lightyellow",
     "description": "The color light yellow.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "lightblue",
     "description": "The color light blue.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "lightmagenta",
     "description": "The color light magenta.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "lightcyan",
     "description": "The color light cyan.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    }
   ],
   "meta": {
    "line": 1262,
    "file": "Giveaways.ts",
    "path": "src"
   }
  },
  {
   "name": "IUpdateState",
   "description": "An object containing the data about available module updates.",
   "type": [
    [
     [
      "object"
     ]
    ]
   ],
   "props": [
    {
     "name": "updated",
     "description": "Whether an update is available or not.",
     "type": [
      [
       [
        "boolean"
       ]
      ]
     ]
    },
    {
     "name": "installedVersion",
     "description": "The currently installed version.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "availableVersion",
     "description": "The available version, if any.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    }
   ],
   "meta": {
    "line": 1285,
    "file": "Giveaways.ts",
    "path": "src"
   }
  },
  {
   "name": "If<T, IfTrue, IfFalse>",
   "description": "Represents the `if` statement on a type level.\n\nType parameters:\n\n- `T` ({@link boolean}) - The boolean type to compare with.\n- `IfTrue` ({@link any}) - The type that will be returned if `T` is `true`.\n- `IfFalse` ({@link any}) - The type that will be returned if `T` is `false`.",
   "type": [
    [
     [
      "IfTrue"
     ]
    ],
    [
     [
      "IfFalse"
     ]
    ]
   ],
   "meta": {
    "line": 1297,
    "file": "Giveaways.ts",
    "path": "src"
   }
  },
  {
   "name": "Optional<T, K>",
   "description": "Makes the specified properties in `K` from the object in `T` optional.\n\nType parameters:\n\n- `T` ({@link object}) - The object to get the properties from.\n- `K` (keyof T) - The properties to make optional.",
   "type": [
    [
     [
      "object"
     ]
    ]
   ],
   "meta": {
    "line": 1314,
    "file": "Giveaways.ts",
    "path": "src"
   }
  },
  {
   "name": "FindCallback<T>",
   "description": "A callback function that calls when finding an element in array.\n\nType parameters:\n\n- `T` ({@link any}) - The type of item to be passed to the callback function.",
   "type": [
    [
     [
      "function"
     ]
    ]
   ],
   "params": [
    {
     "name": "item",
     "description": "The item to be passed to the callback function.",
     "type": [
      [
       [
        "T"
       ]
      ]
     ]
    }
   ],
   "returns": {
    "types": [
     [
      [
       "boolean"
      ]
     ]
    ],
    "description": "The boolean value returned by the callback function."
   },
   "meta": {
    "line": 1328,
    "file": "Giveaways.ts",
    "path": "src"
   }
  },
  {
   "name": "MapCallback<T, TReturnType>",
   "description": "A callback function that calls when mapping the array using the {@link Array.prototype.map} method.\n\nType parameters:\n\n- `T` ({@link any}) - The type of item to be passed to the callback function.\n- `TReturnType` - ({@link any}) The type of value returned by the callback function.",
   "type": [
    [
     [
      "function"
     ]
    ]
   ],
   "params": [
    {
     "name": "item",
     "description": "The item to be passed to the callback function.",
     "type": [
      [
       [
        "T"
       ]
      ]
     ]
    }
   ],
   "returns": {
    "types": [
     [
      [
       "TReturnType"
      ]
     ]
    ],
    "description": "The value returned by the callback function."
   },
   "meta": {
    "line": 1342,
    "file": "Giveaways.ts",
    "path": "src"
   }
  },
  {
   "name": "DatabaseType",
   "description": "An enum containing the possible database types.",
   "type": [
    [
     [
      "string"
     ]
    ]
   ],
   "props": [
    {
     "name": "JSON",
     "description": "The JSON database type.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "MONGODB",
     "description": "The MongoDB database type.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "ENMAP",
     "description": "The Enmap database type.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    }
   ],
   "meta": {
    "line": 1,
    "file": "databaseType.enum.ts",
    "path": "src/types"
   }
  }
 ],
 "externals": []
}