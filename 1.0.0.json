{
 "meta": {
  "generator": "0.11.1",
  "format": 22,
  "date": 1687969748698
 },
 "custom": {
  "general": {
   "name": "General",
   "files": {
    "welcome": {
     "name": "Welcome",
     "type": "md",
     "content": "# test\n",
     "path": "docs/general/welcome.md"
    }
   }
  }
 },
 "classes": [
  {
   "name": "Giveaways",
   "description": "Main Giveaways class.",
   "extends": [
    [
     [
      "Emitter",
      "<"
     ],
     [
      "IGiveawaysEvents",
      "<"
     ],
     [
      "TDatabaseType",
      ">>"
     ]
    ]
   ],
   "construct": {
    "name": "Giveaways",
    "description": "Main @see Giveaways constructor.",
    "params": [
     {
      "name": "client",
      "description": "Discord Client.",
      "type": [
       [
        [
         "Client"
        ]
       ]
      ]
     },
     {
      "name": "options",
      "description": "@see Giveaways configuration.",
      "type": [
       [
        [
         "IGiveawaysConfiguration",
         "<"
        ],
        [
         "TDatabaseType",
         ">"
        ]
       ]
      ]
     }
    ]
   },
   "props": [
    {
     "name": "ready",
     "see": [
      "Giveaways ready state."
     ],
     "type": [
      [
       [
        "boolean"
       ]
      ]
     ],
     "meta": {
      "line": 122,
      "file": "Giveaways.ts",
      "path": "src"
     }
    },
    {
     "name": "version",
     "see": [
      "Giveaways version."
     ],
     "type": [
      [
       [
        "string"
       ]
      ]
     ],
     "meta": {
      "line": 128,
      "file": "Giveaways.ts",
      "path": "src"
     }
    },
    {
     "name": "_logger",
     "see": [
      "Giveaways logger."
     ],
     "access": "private",
     "type": [
      [
       [
        "Logger"
       ]
      ]
     ],
     "meta": {
      "line": 134,
      "file": "Giveaways.ts",
      "path": "src"
     }
    },
    {
     "name": "options",
     "description": "Completed, filled and fixed @see Giveaways configuration.",
     "type": [
      [
       [
        "Required",
        "<"
       ],
       [
        "IGiveawaysConfiguration",
        "<"
       ],
       [
        "DatabaseType",
        ">>"
       ]
      ]
     ],
     "meta": {
      "line": 147,
      "file": "Giveaways.ts",
      "path": "src"
     }
    },
    {
     "name": "db",
     "description": "External database (such as Enmap or MongoDB) if used.",
     "nullable": true,
     "type": [
      [
       [
        "Database",
        "<"
       ],
       [
        "DatabaseType",
        ">"
       ]
      ]
     ],
     "meta": {
      "line": 153,
      "file": "Giveaways.ts",
      "path": "src"
     }
    },
    {
     "name": "database",
     "description": "Database Manager.",
     "type": [
      [
       [
        "DatabaseManager"
       ]
      ]
     ],
     "meta": {
      "line": 159,
      "file": "Giveaways.ts",
      "path": "src"
     }
    },
    {
     "name": "giveawaysCheckingInterval",
     "see": [
      "Giveaways ending state checking interval."
     ],
     "type": [
      [
       [
        "NodeJS",
        "."
       ],
       [
        "Timeout"
       ]
      ]
     ],
     "meta": {
      "line": 165,
      "file": "Giveaways.ts",
      "path": "src"
     }
    },
    {
     "name": "_messageUtils",
     "description": "Message utils instance.",
     "access": "private",
     "type": [
      [
       [
        "MessageUtils"
       ]
      ]
     ],
     "meta": {
      "line": 171,
      "file": "Giveaways.ts",
      "path": "src"
     }
    }
   ],
   "methods": [
    {
     "name": "_init",
     "description": "Initialize the database connection and initialize the @see Giveaways module.",
     "access": "private",
     "async": true,
     "returns": [
      [
       [
        "Promise",
        "<"
       ],
       [
        "void",
        ">"
       ]
      ]
     ],
     "meta": {
      "line": 181,
      "file": "Giveaways.ts",
      "path": "src"
     }
    },
    {
     "name": "_sendUpdateMessage",
     "description": "Sends the @see Giveaways module update state in the console.",
     "access": "private",
     "async": true,
     "returns": [
      [
       [
        "Promise",
        "<"
       ],
       [
        "void",
        ">"
       ]
      ]
     ],
     "meta": {
      "line": 487,
      "file": "Giveaways.ts",
      "path": "src"
     }
    },
    {
     "name": "start",
     "description": "Starts the giveaway.",
     "params": [
      {
       "name": "giveawayOptions",
       "description": "@see Giveaway options.",
       "type": [
        [
         [
          "IGiveawayStartConfig"
         ]
        ]
       ]
      }
     ],
     "async": true,
     "returns": {
      "types": [
       [
        [
         "Promise",
         "<"
        ],
        [
         "Giveaway",
         "<"
        ],
        [
         "DatabaseType",
         ">>"
        ]
       ]
      ],
      "description": "Created @see Giveaway instance."
     },
     "meta": {
      "line": 532,
      "file": "Giveaways.ts",
      "path": "src"
     }
    }
   ],
   "meta": {
    "line": 44,
    "file": "Giveaways.ts",
    "path": "src"
   }
  },
  {
   "name": "Giveaway",
   "description": "Class that represents the Giveaway object.\n\nType parameters:\n\n- TDatabaseType: The database type that will be used in the module.",
   "implements": [
    [
     [
      "IGiveaway",
      "<"
     ],
     [
      "DatabaseType",
      ">"
     ]
    ]
   ],
   "props": [
    {
     "name": "_giveaways",
     "description": "Giveaways instance.",
     "access": "private",
     "type": [
      [
       [
        "Giveaways",
        "<"
       ],
       [
        "DatabaseType",
        ">"
       ]
      ]
     ],
     "meta": {
      "line": 144,
      "file": "Giveaway.ts",
      "path": "src/lib"
     }
    },
    {
     "name": "_messageUtils",
     "description": "Message utils instance.",
     "access": "private",
     "type": [
      [
       [
        "MessageUtils"
       ]
      ]
     ],
     "meta": {
      "line": 151,
      "file": "Giveaway.ts",
      "path": "src/lib"
     }
    },
    {
     "name": "raw",
     "description": "Raw giveaway object.",
     "type": [
      [
       [
        "IGiveaway"
       ]
      ]
     ],
     "meta": {
      "line": 159,
      "file": "Giveaway.ts",
      "path": "src/lib"
     }
    },
    {
     "name": "id",
     "description": "Giveaway ID.",
     "type": [
      [
       [
        "number"
       ]
      ]
     ],
     "meta": {
      "line": 165,
      "file": "Giveaway.ts",
      "path": "src/lib"
     }
    },
    {
     "name": "prize",
     "description": "Giveaway prize.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ],
     "meta": {
      "line": 171,
      "file": "Giveaway.ts",
      "path": "src/lib"
     }
    },
    {
     "name": "time",
     "description": "Giveaway time.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ],
     "meta": {
      "line": 177,
      "file": "Giveaway.ts",
      "path": "src/lib"
     }
    },
    {
     "name": "state",
     "description": "Giveaway state.",
     "type": [
      [
       [
        "GiveawayState"
       ]
      ]
     ],
     "meta": {
      "line": 183,
      "file": "Giveaway.ts",
      "path": "src/lib"
     }
    },
    {
     "name": "winnersCount",
     "description": "Number of possible winners in the giveaway.",
     "type": [
      [
       [
        "number"
       ]
      ]
     ],
     "meta": {
      "line": 189,
      "file": "Giveaway.ts",
      "path": "src/lib"
     }
    },
    {
     "name": "startTimestamp",
     "description": "Giveaway start timestamp.",
     "type": [
      [
       [
        "number"
       ]
      ]
     ],
     "meta": {
      "line": 195,
      "file": "Giveaway.ts",
      "path": "src/lib"
     }
    },
    {
     "name": "endTimestamp",
     "description": "Giveaway end timestamp.",
     "type": [
      [
       [
        "number"
       ]
      ]
     ],
     "meta": {
      "line": 201,
      "file": "Giveaway.ts",
      "path": "src/lib"
     }
    },
    {
     "name": "messageID",
     "description": "Giveaway message ID.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ],
     "meta": {
      "line": 207,
      "file": "Giveaway.ts",
      "path": "src/lib"
     }
    },
    {
     "name": "guild",
     "description": "Guild where the giveaway was created.",
     "type": [
      [
       [
        "Guild"
       ]
      ]
     ],
     "meta": {
      "line": 213,
      "file": "Giveaway.ts",
      "path": "src/lib"
     }
    },
    {
     "name": "host",
     "description": "User who created the giveaway.",
     "type": [
      [
       [
        "User"
       ]
      ]
     ],
     "meta": {
      "line": 219,
      "file": "Giveaway.ts",
      "path": "src/lib"
     }
    },
    {
     "name": "channel",
     "description": "Channel where the giveaway was created.",
     "type": [
      [
       [
        "TextChannel"
       ]
      ]
     ],
     "meta": {
      "line": 225,
      "file": "Giveaway.ts",
      "path": "src/lib"
     }
    },
    {
     "name": "messageURL",
     "description": "Giveaway message URL.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ],
     "meta": {
      "line": 231,
      "file": "Giveaway.ts",
      "path": "src/lib"
     }
    },
    {
     "name": "isEnded",
     "description": "Determines if the giveaway was ended in database.",
     "type": [
      [
       [
        "boolean"
       ]
      ]
     ],
     "meta": {
      "line": 237,
      "file": "Giveaway.ts",
      "path": "src/lib"
     }
    },
    {
     "name": "entriesArray",
     "description": "Array of user IDs of users that have entered the giveaway.",
     "type": [
      [
       [
        "Array",
        "<"
       ],
       [
        "string",
        ">"
       ]
      ]
     ],
     "meta": {
      "line": 243,
      "file": "Giveaway.ts",
      "path": "src/lib"
     }
    },
    {
     "name": "entries",
     "description": "Number of giveaway entries.",
     "type": [
      [
       [
        "number"
       ]
      ]
     ],
     "meta": {
      "line": 249,
      "file": "Giveaway.ts",
      "path": "src/lib"
     }
    },
    {
     "name": "messageProps",
     "description": "Message data properties for embeds and buttons.",
     "type": [
      [
       [
        "IGiveawayMessageProps"
       ]
      ]
     ],
     "meta": {
      "line": 255,
      "file": "Giveaway.ts",
      "path": "src/lib"
     }
    },
    {
     "name": "isFinished",
     "description": "Determines if the giveaway's time is up or if the giveaway was ended forcefully.",
     "type": [
      [
       [
        "boolean"
       ]
      ]
     ],
     "meta": {
      "line": 285,
      "file": "Giveaway.ts",
      "path": "src/lib"
     }
    }
   ],
   "methods": [
    {
     "name": "sync",
     "description": "Syncs the constructor properties with specified raw giveaway object.",
     "params": [
      {
       "name": "giveaway",
       "description": "Giveaway object to sync the constructor properties with.",
       "type": [
        [
         [
          "IGiveaway"
         ]
        ]
       ]
      }
     ],
     "meta": {
      "line": 377,
      "file": "Giveaway.ts",
      "path": "src/lib"
     }
    },
    {
     "name": "_pickWinners",
     "description": "Shuffles all the giveaway entries and randomly picks the winners.",
     "returns": {
      "types": [
       [
        [
         "Array",
         "<"
        ],
        [
         "string",
         ">"
        ]
       ]
      ],
      "description": "Array of users that were picked as the winners."
     },
     "meta": {
      "line": 391,
      "file": "Giveaway.ts",
      "path": "src/lib"
     }
    },
    {
     "name": "_shuffleArray",
     "description": "Shuffles an array and returns it.",
     "params": [
      {
       "name": "arrayToShuffle",
       "description": "Thr array to shuffle.",
       "type": [
        [
         [
          "Array",
          "<"
         ],
         [
          "any",
          ">"
         ]
        ]
       ]
      }
     ],
     "returns": {
      "types": [
       [
        [
         "Array",
         "<"
        ],
        [
         "any",
         ">"
        ]
       ]
      ],
      "description": "Shuffled array"
     },
     "meta": {
      "line": 413,
      "file": "Giveaway.ts",
      "path": "src/lib"
     }
    },
    {
     "name": "_getFromDatabase",
     "description": "Gets the giveaway data and its index in guild giveaways array from database.",
     "access": "private",
     "params": [
      {
       "name": "guildID",
       "description": "Guild ID to get the giveaways array from.",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      }
     ],
     "async": true,
     "returns": {
      "types": [
       [
        [
         "Promise",
         "<"
        ],
        [
         "IDatabaseGiveaway",
         ">"
        ]
       ]
      ],
      "description": "Database giveaway object."
     },
     "meta": {
      "line": 430,
      "file": "Giveaway.ts",
      "path": "src/lib"
     }
    },
    {
     "name": "toJSON",
     "description": "Converts the Giveaway instance to a plain object representation.",
     "returns": {
      "types": [
       [
        [
         "IGiveaway"
        ]
       ]
      ],
      "description": "Plain object representation of Giveaway instance."
     },
     "meta": {
      "line": 450,
      "file": "Giveaway.ts",
      "path": "src/lib"
     }
    }
   ],
   "meta": {
    "line": 12,
    "file": "Giveaway.ts",
    "path": "src/lib"
   }
  },
  {
   "name": "DatabaseManager",
   "description": "Database manager class.",
   "construct": {
    "name": "DatabaseManager",
    "description": "Database manager constructor.",
    "params": [
     {
      "name": "giveaways",
      "description": "Giveaways instance.",
      "type": [
       [
        [
         "Giveaways",
         "<"
        ],
        [
         "DatabaseType",
         ">"
        ]
       ]
      ]
     }
    ]
   },
   "props": [
    {
     "name": "giveaways",
     "description": "Giveaways instance.",
     "type": [
      [
       [
        "Giveaways",
        "<"
       ],
       [
        "DatabaseType",
        ">"
       ]
      ]
     ],
     "meta": {
      "line": 45,
      "file": "DatabaseManager.ts",
      "path": "src/lib/managers"
     }
    },
    {
     "name": "db",
     "description": "Database instance.",
     "type": [
      [
       [
        "Database",
        "<"
       ],
       [
        "DatabaseType",
        ">"
       ]
      ]
     ],
     "meta": {
      "line": 51,
      "file": "DatabaseManager.ts",
      "path": "src/lib/managers"
     }
    },
    {
     "name": "databaseType",
     "description": "Database type.",
     "type": [
      [
       [
        "DatabaseType"
       ]
      ]
     ],
     "meta": {
      "line": 57,
      "file": "DatabaseManager.ts",
      "path": "src/lib/managers"
     }
    },
    {
     "name": "jsonParser",
     "description": "JSON parser instance.",
     "type": [
      [
       [
        "JSONParser"
       ]
      ]
     ],
     "meta": {
      "line": 65,
      "file": "DatabaseManager.ts",
      "path": "src/lib/managers"
     }
    }
   ],
   "methods": [
    {
     "name": "getKeys",
     "description": "Gets the object keys in database root or in object by specified key.",
     "params": [
      {
       "name": "key",
       "description": "The key in database.",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      }
     ],
     "async": true,
     "returns": {
      "types": [
       [
        [
         "Array",
         "<"
        ],
        [
         "string",
         ">"
        ]
       ]
      ],
      "description": "Database object keys array."
     },
     "meta": {
      "line": 73,
      "file": "DatabaseManager.ts",
      "path": "src/lib/managers"
     }
    },
    {
     "name": "get",
     "description": "Gets the value from database by specified key.",
     "params": [
      {
       "name": "key",
       "description": "The key in database.",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      }
     ],
     "async": true,
     "returns": {
      "types": [
       [
        [
         "V"
        ]
       ]
      ],
      "description": "Value from database."
     },
     "meta": {
      "line": 83,
      "file": "DatabaseManager.ts",
      "path": "src/lib/managers"
     }
    },
    {
     "name": "fetch",
     "description": "Gets the value from database by specified key.\n\n- This method is an alias to {@link DatabaseManager.get()} method.",
     "params": [
      {
       "name": "key",
       "description": "The key in database.",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      }
     ],
     "async": true,
     "returns": {
      "types": [
       [
        [
         "V"
        ]
       ]
      ],
      "description": "Value from database."
     },
     "meta": {
      "line": 112,
      "file": "DatabaseManager.ts",
      "path": "src/lib/managers"
     }
    },
    {
     "name": "has",
     "description": "Determines if specified key exists in database.",
     "params": [
      {
       "name": "key",
       "description": "The key in database.",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      }
     ],
     "async": true,
     "returns": {
      "types": [
       [
        [
         "boolean"
        ]
       ]
      ],
      "description": "Boolean value that determines if specified key exists in database."
     },
     "meta": {
      "line": 124,
      "file": "DatabaseManager.ts",
      "path": "src/lib/managers"
     }
    },
    {
     "name": "includes",
     "description": "Determines if specified key exists in database.\n\n- This method is an alias to {@link DatabaseManager.has()} method.",
     "params": [
      {
       "name": "key",
       "description": "The key in database.",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      }
     ],
     "async": true,
     "returns": {
      "types": [
       [
        [
         "boolean"
        ]
       ]
      ],
      "description": "Boolean value that determines if specified key exists in database."
     },
     "meta": {
      "line": 134,
      "file": "DatabaseManager.ts",
      "path": "src/lib/managers"
     }
    },
    {
     "name": "set",
     "description": "Sets data in database.",
     "params": [
      {
       "name": "key",
       "description": "The key in database.",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "value",
       "description": "Any data to set.",
       "type": [
        [
         [
          "V"
         ]
        ]
       ]
      }
     ],
     "async": true,
     "returns": {
      "types": [
       [
        [
         "boolean"
        ]
       ]
      ],
      "description": "`true` if set successfully, `false` otherwise."
     },
     "meta": {
      "line": 145,
      "file": "DatabaseManager.ts",
      "path": "src/lib/managers"
     }
    },
    {
     "name": "clear",
     "description": "Clears the whole database.",
     "async": true,
     "returns": {
      "types": [
       [
        [
         "Promise",
         "<"
        ],
        [
         "boolean",
         ">"
        ]
       ]
      ],
      "description": "`true` if set successfully, `false` otherwise."
     },
     "meta": {
      "line": 177,
      "file": "DatabaseManager.ts",
      "path": "src/lib/managers"
     }
    },
    {
     "name": "deleteAll",
     "description": "Clears the whole database.\n\n- This method is an alias to {@link DatabaseManager.clear()} method.",
     "async": true,
     "returns": {
      "types": [
       [
        [
         "Promise",
         "<"
        ],
        [
         "boolean",
         ">"
        ]
       ]
      ],
      "description": "`true` if set successfully, `false` otherwise."
     },
     "meta": {
      "line": 205,
      "file": "DatabaseManager.ts",
      "path": "src/lib/managers"
     }
    },
    {
     "name": "add",
     "description": "Adds a number to the data in database.",
     "params": [
      {
       "name": "key",
       "description": "The key in database.",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "numberToAdd",
       "description": "Any number to add.",
       "type": [
        [
         [
          "number"
         ]
        ]
       ]
      }
     ],
     "async": true,
     "returns": {
      "types": [
       [
        [
         "boolean"
        ]
       ]
      ],
      "description": "`true` if added successfully, `false` otherwise."
     },
     "meta": {
      "line": 215,
      "file": "DatabaseManager.ts",
      "path": "src/lib/managers"
     }
    },
    {
     "name": "subtract",
     "description": "Subtracts a number to the data in database.",
     "params": [
      {
       "name": "key",
       "description": "The key in database.",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "numberToSubtract",
       "description": "Any number to subtract.",
       "type": [
        [
         [
          "number"
         ]
        ]
       ]
      }
     ],
     "async": true,
     "returns": {
      "types": [
       [
        [
         "boolean"
        ]
       ]
      ],
      "description": "`true` if subtracted successfully, `false` otherwise."
     },
     "meta": {
      "line": 271,
      "file": "DatabaseManager.ts",
      "path": "src/lib/managers"
     }
    },
    {
     "name": "delete",
     "description": "Deletes the data from database.",
     "params": [
      {
       "name": "key",
       "description": "The key in database.",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      }
     ],
     "async": true,
     "returns": {
      "types": [
       [
        [
         "boolean"
        ]
       ]
      ],
      "description": "`true` if deleted successfully, `false` otherwise."
     },
     "meta": {
      "line": 327,
      "file": "DatabaseManager.ts",
      "path": "src/lib/managers"
     }
    },
    {
     "name": "push",
     "description": "Pushes a value into specified array in database.",
     "params": [
      {
       "name": "key",
       "description": "The key in database.",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "value",
       "description": "Any value to push into database array.",
       "type": [
        [
         [
          "V"
         ]
        ]
       ]
      }
     ],
     "async": true,
     "returns": {
      "types": [
       [
        [
         "Promise",
         "<"
        ],
        [
         "boolean",
         ">"
        ]
       ]
      ],
      "description": "`true` if pushed successfully, `false` otherwise."
     },
     "meta": {
      "line": 357,
      "file": "DatabaseManager.ts",
      "path": "src/lib/managers"
     }
    },
    {
     "name": "pull",
     "description": "Changes the specified element's value in a specified array in the database.",
     "params": [
      {
       "name": "key",
       "description": "The key in database.",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "index",
       "description": "The index in the target array.",
       "type": [
        [
         [
          "number"
         ]
        ]
       ]
      },
      {
       "name": "newValue",
       "description": "The new value to set.",
       "type": [
        [
         [
          "V"
         ]
        ]
       ]
      }
     ],
     "async": true,
     "returns": {
      "types": [
       [
        [
         "Promise",
         "<"
        ],
        [
         "boolean",
         ">"
        ]
       ]
      ],
      "description": "`true` if pulled successfully, `false` otherwise."
     },
     "meta": {
      "line": 420,
      "file": "DatabaseManager.ts",
      "path": "src/lib/managers"
     }
    },
    {
     "name": "pop",
     "description": "Removes an element from a specified array in the database.",
     "params": [
      {
       "name": "key",
       "description": "The key in database.",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "index",
       "description": "The index in the target array.",
       "type": [
        [
         [
          "number"
         ]
        ]
       ]
      }
     ],
     "async": true,
     "returns": {
      "types": [
       [
        [
         "Promise",
         "<"
        ],
        [
         "boolean",
         ">"
        ]
       ]
      ],
      "description": "`true` if popped successfully, `false` otherwise."
     },
     "meta": {
      "line": 484,
      "file": "DatabaseManager.ts",
      "path": "src/lib/managers"
     }
    },
    {
     "name": "all",
     "description": "Gets the whole database object.",
     "async": true,
     "returns": {
      "types": [
       [
        [
         "Promise",
         "<"
        ],
        [
         "V",
         ">"
        ]
       ]
      ],
      "description": "Database object."
     },
     "meta": {
      "line": 546,
      "file": "DatabaseManager.ts",
      "path": "src/lib/managers"
     }
    }
   ],
   "meta": {
    "line": 7,
    "file": "DatabaseManager.ts",
    "path": "src/lib/managers"
   }
  }
 ],
 "interfaces": [],
 "typedefs": [
  {
   "name": "IGiveaway<DatabaseType>",
   "description": "An object that contains an information about a giveaway.",
   "type": [
    [
     [
      "object"
     ]
    ]
   ],
   "props": [
    {
     "name": "id",
     "description": "The ID of the giveaway.",
     "type": [
      [
       [
        "number"
       ]
      ]
     ]
    },
    {
     "name": "prize",
     "description": "The prize of the giveaway.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "time",
     "description": "The time of the giveaway.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "state",
     "description": "The state of the giveaway.",
     "type": [
      [
       [
        "GiveawayState"
       ]
      ]
     ]
    },
    {
     "name": "winnersCount",
     "description": "The number of possible winners in the giveaway.",
     "type": [
      [
       [
        "number"
       ]
      ]
     ]
    },
    {
     "name": "startTimestamp",
     "description": "The timestamp when the giveaway started.",
     "type": [
      [
       [
        "number"
       ]
      ]
     ]
    },
    {
     "name": "isEnded",
     "description": "Determines if the giveaway was ended in the database.",
     "type": [
      [
       [
        "boolean"
       ]
      ]
     ]
    },
    {
     "name": "endTimestamp",
     "description": "The timestamp when the giveaway ended.",
     "type": [
      [
       [
        "number"
       ]
      ]
     ]
    },
    {
     "name": "hostMemberID",
     "description": "The ID of the host member.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "channelID",
     "description": "The ID of the channel where the giveaway is held.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "messageID",
     "description": "The ID of the giveaway message.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "messageURL",
     "description": "The URL of the giveaway message.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "guildID",
     "description": "The ID of the guild where the giveaway is held.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "entries",
     "description": "The number of giveaway entries.",
     "type": [
      [
       [
        "number"
       ]
      ]
     ]
    },
    {
     "name": "entriesArray",
     "description": "The array of user IDs of users that have entered the giveaway.",
     "type": [
      [
       [
        "Array",
        "<"
       ],
       [
        "string",
        ">"
       ]
      ]
     ]
    },
    {
     "name": "messageProps",
     "description": "The message data properties for embeds and buttons.",
     "type": [
      [
       [
        "IGiveawayMessageProps"
       ]
      ]
     ]
    }
   ],
   "meta": {
    "line": 3,
    "file": "giveaway.interface.ts",
    "path": "src/lib"
   }
  },
  {
   "name": "IGiveawayRerollEmbeds",
   "description": "An interface containing embed objects for various giveaway reroll cases.",
   "type": [
    [
     [
      "object"
     ]
    ]
   ],
   "props": [
    {
     "name": "onlyHostCanReroll",
     "description": "The options for the embed when only the host can reroll.",
     "type": [
      [
       [
        "IGiveawayEmbedOptions"
       ]
      ]
     ]
    },
    {
     "name": "newGiveawayMessage",
     "description": "The options for the embed when sending a new giveaway message.",
     "type": [
      [
       [
        "IGiveawayEmbedOptions"
       ]
      ]
     ]
    },
    {
     "name": "successMessage",
     "description": "The options for the embed when the giveaway is successful.",
     "type": [
      [
       [
        "IGiveawayEmbedOptions"
       ]
      ]
     ]
    }
   ],
   "meta": {
    "line": 124,
    "file": "giveaway.interface.ts",
    "path": "src/lib"
   }
  },
  {
   "name": "IGiveawayFinishEmbeds",
   "description": "An interface containing embed objects for various giveaway finish cases.",
   "type": [
    [
     [
      "object"
     ]
    ]
   ],
   "props": [
    {
     "name": "newGiveawayMessage",
     "description": "The options for the embed when sending a new giveaway message.",
     "type": [
      [
       [
        "IGiveawayEmbedOptions"
       ]
      ]
     ]
    },
    {
     "name": "endMessage",
     "description": "The options for the embed when the giveaway has ended.",
     "type": [
      [
       [
        "IGiveawayEmbedOptions"
       ]
      ]
     ]
    },
    {
     "name": "noWinners",
     "description": "The options for the embed when there are no winners for the giveaway.",
     "type": [
      [
       [
        "IGiveawayEmbedOptions"
       ]
      ]
     ]
    },
    {
     "name": "noWinnersEndMessage",
     "description": "The options for the embed when there are no winners for the giveaway and it has ended.",
     "type": [
      [
       [
        "IGiveawayEmbedOptions"
       ]
      ]
     ]
    }
   ],
   "meta": {
    "line": 132,
    "file": "giveaway.interface.ts",
    "path": "src/lib"
   }
  },
  {
   "name": "IGiveawayMessageProps",
   "description": "An interface that contains the data properties for embeds and buttons.",
   "type": [
    [
     [
      "object"
     ]
    ]
   ],
   "props": [
    {
     "name": "embeds",
     "description": "The embed objects for the giveaway message.",
     "type": [
      [
       [
        "IGiveawayEmbeds"
       ]
      ]
     ]
    },
    {
     "name": "buttons",
     "description": "The button objects for the giveaway message.",
     "type": [
      [
       [
        "IGiveawayButtons"
       ]
      ]
     ]
    }
   ],
   "meta": {
    "line": 143,
    "file": "giveaway.interface.ts",
    "path": "src/lib"
   }
  },
  {
   "name": "IGiveawayEmbeds",
   "description": "An interface containing different types of giveaway embeds in the IGiveaways class.",
   "type": [
    [
     [
      "object"
     ]
    ]
   ],
   "props": [
    {
     "name": "start",
     "description": "Message embed data for cases when the giveaway has started.",
     "type": [
      [
       [
        "IGiveawayEmbedOptions"
       ]
      ]
     ]
    },
    {
     "name": "reroll",
     "description": "Message embed data for cases when rerolling the giveaway.",
     "type": [
      [
       [
        "IGiveawayRerollEmbeds"
       ]
      ]
     ]
    },
    {
     "name": "finish",
     "description": "Message embed data for cases when the giveaway has finished.",
     "type": [
      [
       [
        "IGiveawayFinishEmbeds"
       ]
      ]
     ]
    }
   ],
   "meta": {
    "line": 164,
    "file": "giveaway.interface.ts",
    "path": "src/lib"
   }
  },
  {
   "name": "IGiveawayMessageButtons",
   "description": "An object that contains the giveaway buttons that may be set up.",
   "type": [
    [
     [
      "object"
     ]
    ]
   ],
   "props": [
    {
     "name": "joinGiveawayButton",
     "description": "The options for the join giveaway button.",
     "type": [
      [
       [
        "IGiveawayButtonOptions"
       ]
      ]
     ]
    },
    {
     "name": "rerollButton",
     "description": "The options for the reroll button.",
     "type": [
      [
       [
        "IGiveawayButtonOptions"
       ]
      ]
     ]
    },
    {
     "name": "goToMessageButton",
     "description": "The options for the go to message button.",
     "type": [
      [
       [
        "IGiveawayButtonOptions"
       ]
      ]
     ]
    }
   ],
   "meta": {
    "line": 198,
    "file": "giveaway.interface.ts",
    "path": "src/lib"
   }
  },
  {
   "name": "GiveawayWithoutInternalProps",
   "description": "An object that contains an information about a giveaway without internal props.",
   "type": [
    [
     [
      "object"
     ]
    ]
   ],
   "props": [
    {
     "name": "id",
     "description": "The ID of the giveaway.",
     "type": [
      [
       [
        "number"
       ]
      ]
     ]
    },
    {
     "name": "prize",
     "description": "The prize of the giveaway.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "time",
     "description": "The time of the giveaway.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "winnersCount",
     "description": "The number of possible winners in the giveaway.",
     "type": [
      [
       [
        "number"
       ]
      ]
     ]
    },
    {
     "name": "startTimestamp",
     "description": "The timestamp when the giveaway started.",
     "type": [
      [
       [
        "number"
       ]
      ]
     ]
    },
    {
     "name": "endTimestamp",
     "description": "The timestamp when the giveaway ended.",
     "type": [
      [
       [
        "number"
       ]
      ]
     ]
    },
    {
     "name": "hostMemberID",
     "description": "The ID of the host member.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "channelID",
     "description": "The ID of the channel where the giveaway is held.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "messageID",
     "description": "The ID of the giveaway message.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "messageURL",
     "description": "The URL of the giveaway message.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "guildID",
     "description": "The ID of the guild where the giveaway is held.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "entriesArray",
     "description": "The array of user IDs of users that have entered the giveaway.",
     "type": [
      [
       [
        "Array",
        "<"
       ],
       [
        "string",
        ">"
       ]
      ]
     ]
    },
    {
     "name": "messageProps",
     "description": "The message data properties for embeds and buttons.",
     "type": [
      [
       [
        "IGiveawayMessageProps"
       ]
      ]
     ]
    }
   ],
   "meta": {
    "line": 210,
    "file": "giveaway.interface.ts",
    "path": "src/lib"
   }
  },
  {
   "name": "GiveawayState",
   "description": "An enum that determines the state of a giveaway.",
   "type": [
    [
     [
      "number"
     ]
    ]
   ],
   "props": [
    {
     "name": "STARTED",
     "description": "The giveaway has started.",
     "type": [
      [
       [
        "number"
       ]
      ]
     ]
    },
    {
     "name": "ENDED",
     "description": "The giveaway has ended.",
     "type": [
      [
       [
        "number"
       ]
      ]
     ]
    }
   ],
   "meta": {
    "line": 232,
    "file": "giveaway.interface.ts",
    "path": "src/lib"
   }
  },
  {
   "name": "replaceGiveawayKeys",
   "description": "Replaces the giveaways keys with the corresponding values in the input string.",
   "type": [
    [
     [
      "function"
     ]
    ]
   ],
   "params": [
    {
     "name": "input",
     "description": "The input string to replace the keys in.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "giveawayObject",
     "type": [
      [
       [
        "IGiveaway"
       ]
      ]
     ]
    },
    {
     "name": "winners",
     "description": "Winners array to replace the winners giveaway keys.",
     "type": [
      [
       [
        "Array",
        "<"
       ],
       [
        "string",
        ">"
       ]
      ]
     ]
    }
   ],
   "returns": {
    "types": [
     [
      [
       "string"
      ]
     ]
    ],
    "description": "The string with all keys replaced."
   },
   "meta": {
    "line": 21,
    "file": "giveawayTemplate.ts",
    "path": "src/structures"
   }
  },
  {
   "name": "DatabaseType",
   "description": "An enum containing the possible database types.",
   "type": [
    [
     [
      "string"
     ]
    ]
   ],
   "props": [
    {
     "name": "JSON",
     "description": "The JSON database type.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "MONGODB",
     "description": "The MongoDB database type.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "ENMAP",
     "description": "The Enmap database type.",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    }
   ],
   "meta": {
    "line": 1,
    "file": "databaseType.enum.ts",
    "path": "src/src/types"
   }
  }
 ],
 "externals": []
}