"use strict";var __importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.Giveaways=void 0;const fs_1=require("fs"),promises_1=require("fs/promises"),ms_1=require("./lib/misc/ms"),quick_mongo_super_1=__importDefault(require("quick-mongo-super")),enmap_1=__importDefault(require("enmap")),discord_js_1=require("discord.js"),databaseType_enum_1=require("./types/databaseType.enum"),checkUpdates_function_1=require("./lib/util/functions/checkUpdates.function"),package_json_1=require("../package.json"),GiveawaysError_1=require("./lib/util/classes/GiveawaysError"),Logger_1=require("./lib/util/classes/Logger"),Emitter_1=require("./lib/util/classes/Emitter"),DatabaseManager_1=require("./lib/managers/DatabaseManager"),checkConfiguration_function_1=require("./lib/util/functions/checkConfiguration.function"),Giveaway_1=require("./lib/Giveaway"),giveaway_interface_1=require("./lib/giveaway.interface"),giveawayTemplate_1=require("./structures/giveawayTemplate"),MessageUtils_1=require("./lib/util/classes/MessageUtils"),isTimeStringValid_function_1=require("./lib/util/functions/isTimeStringValid.function");class Giveaways extends Emitter_1.Emitter{client;ready;version;options;db;database;_logger;_messageUtils;giveawaysCheckingInterval;constructor(e,r){super(),this.client=e,this.ready=!1,this.version=package_json_1.version,this._logger=new Logger_1.Logger(r.debug||!1),this._logger.debug("Giveaways version: "+this.version,"lightcyan"),this._logger.debug(`Database type is ${r.database}.`,"lightcyan"),this._logger.debug("Debug mode is enabled.","lightcyan"),this._logger.debug("Checking the configuration..."),this.options=(0,checkConfiguration_function_1.checkConfiguration)(r,r.configurationChecker),this.db=null,this.database=null,this.giveawaysCheckingInterval=null,this._messageUtils=new MessageUtils_1.MessageUtils(this),this._init()}async _init(){if(this._logger.debug("Giveaways starting process launched.","lightgreen"),!this.client)throw new GiveawaysError_1.GiveawaysError(GiveawaysError_1.GiveawaysErrorCodes.NO_DISCORD_CLIENT);if(!this.options.database)throw new GiveawaysError_1.GiveawaysError(GiveawaysError_1.errorMessages.REQUIRED_CONFIG_OPTION_MISSING("database"),GiveawaysError_1.GiveawaysErrorCodes.REQUIRED_CONFIG_OPTION_MISSING);if(!this.options.connection)throw new GiveawaysError_1.GiveawaysError(GiveawaysError_1.errorMessages.REQUIRED_CONFIG_OPTION_MISSING("connection"),GiveawaysError_1.GiveawaysErrorCodes.REQUIRED_CONFIG_OPTION_MISSING);if(!Object.keys(databaseType_enum_1.DatabaseType).map((e=>e.toLowerCase())).includes(this.options.database.toLowerCase()))throw new GiveawaysError_1.GiveawaysError(GiveawaysError_1.errorMessages.INVALID_TYPE('"database"','value from "DatabaseType" enum: either "JSON", "MONGODB" or "Enmap"',typeof this.options.database),GiveawaysError_1.GiveawaysErrorCodes.INVALID_TYPE);if("object"!=typeof this.options.connection)throw new GiveawaysError_1.GiveawaysError(GiveawaysError_1.errorMessages.INVALID_TYPE("connection","object",typeof this.options.connection),GiveawaysError_1.GiveawaysErrorCodes.INVALID_TYPE);const e=[discord_js_1.GatewayIntentBits.Guilds,discord_js_1.GatewayIntentBits.GuildMembers,discord_js_1.GatewayIntentBits.GuildMessages,discord_js_1.GatewayIntentBits.GuildMessageReactions],r=new discord_js_1.IntentsBitField(this.client.options.intents);for(const s of e)if(!r.has(s))throw new GiveawaysError_1.GiveawaysError(GiveawaysError_1.errorMessages.INTENT_MISSING(discord_js_1.GatewayIntentBits[s]),GiveawaysError_1.GiveawaysErrorCodes.INTENT_MISSING);switch(this.options.database){case databaseType_enum_1.DatabaseType.JSON:{this._logger.debug("Checking the database file...");const e=this.options.connection;if((0,fs_1.existsSync)(e.path)||await(0,promises_1.writeFile)(e.path,"{}"),e.checkDatabase)try{setInterval((async()=>{(0,fs_1.existsSync)(e.path)||await(0,promises_1.writeFile)(e.path,"{}");const r=await(0,promises_1.readFile)(e.path,"utf-8");JSON.parse(r)}),e.checkingInterval)}catch(e){if(e.message.includes("Unexpected token")||e.message.includes("Unexpected end"))throw new GiveawaysError_1.GiveawaysError(GiveawaysError_1.errorMessages.DATABASE_ERROR(databaseType_enum_1.DatabaseType.JSON,"malformed"),GiveawaysError_1.GiveawaysErrorCodes.DATABASE_ERROR);if(e.message.includes("no such file"))throw new GiveawaysError_1.GiveawaysError(GiveawaysError_1.errorMessages.DATABASE_ERROR(databaseType_enum_1.DatabaseType.JSON,"notFound"),GiveawaysError_1.GiveawaysErrorCodes.DATABASE_ERROR);throw new GiveawaysError_1.GiveawaysError(GiveawaysError_1.errorMessages.DATABASE_ERROR(databaseType_enum_1.DatabaseType.JSON),GiveawaysError_1.GiveawaysErrorCodes.DATABASE_ERROR)}this.emit("databaseConnect");break}case databaseType_enum_1.DatabaseType.MONGODB:{this._logger.debug("Connecting to MongoDB...");const e=this.options.connection,r=new quick_mongo_super_1.default(e),s=Date.now();await r.connect(),this.db=r,this._logger.debug(`MongoDB connection established in ${Date.now()-s}ms`,"lightgreen"),this.emit("databaseConnect");break}case databaseType_enum_1.DatabaseType.ENMAP:{this._logger.debug("Initializing Enmap...");const e=this.options.connection;this.db=new enmap_1.default(e),this.emit("databaseConnect");break}default:throw new GiveawaysError_1.GiveawaysError(GiveawaysError_1.GiveawaysErrorCodes.UNKNOWN_DATABASE)}this.database=new DatabaseManager_1.DatabaseManager(this),await this._sendUpdateMessage(),this._logger.debug("Waiting for client to be ready...");const s=setInterval((()=>{if(this.client.isReady()){clearInterval(s);const e=setInterval((()=>{this._checkGiveaways()}),this.options.giveawaysCheckingInterval);this.giveawaysCheckingInterval=e,this.ready=!0,this.emit("ready",this),this._logger.debug("Giveaways module is ready!","lightgreen")}}),100);this.client.on("interactionCreate",(async e=>{if(e.isButton()){const r=e.message;if("joinGiveawayButton"==e.customId){const s=this.getGuildGiveaways(r.guild?.id).find((e=>e.messageID==r.id));if(!s)throw new GiveawaysError_1.GiveawaysError("Cannot join the giveaway: "+GiveawaysError_1.errorMessages.UNKNOWN_GIVEAWAY(r.id),GiveawaysError_1.GiveawaysErrorCodes.UNKNOWN_GIVEAWAY);if(s.entries.has(e.user.id)){const r=s.messageProps?.embeds?.leaveGiveawayMessage||{},a=this._messageUtils.buildGiveawayEmbed(s.raw,r),i=s.removeEntry(e.guild?.id,e.user.id);Object.keys(r).length||(r.messageContent="You have left the giveaway!"),e.reply({content:r?.messageContent,embeds:1==Object.keys(r).length&&r?.messageContent?[]:[a],ephemeral:!0}).catch((e=>{if(!e.message.toLowerCase().includes("interaction"))throw new GiveawaysError_1.GiveawaysError("Cannot leave the giveaway: "+e,GiveawaysError_1.GiveawaysErrorCodes.UNKNOWN_ERROR)})),this._messageUtils.editEntryGiveawayMessage(i)}else{const r=s.messageProps?.embeds?.joinGiveawayMessage||{},a=this._messageUtils.buildGiveawayEmbed(s.raw,r),i=s.addEntry(e.guild?.id,e.user.id);Object.keys(r).length||(r.messageContent="You have joined the giveaway!"),e.reply({content:r?.messageContent,embeds:1==Object.keys(r).length&&r?.messageContent?[]:[a],ephemeral:!0}).catch((e=>{if(!e.message.toLowerCase().includes("interaction"))throw new GiveawaysError_1.GiveawaysError("Cannot join the giveaway: "+e,GiveawaysError_1.GiveawaysErrorCodes.UNKNOWN_ERROR)})),this._messageUtils.editEntryGiveawayMessage(i)}}if("rerollButton"==e.customId){const s=this.getGuildGiveaways(r.guild?.id).find((e=>e.messageID==r.id)),a=s?.messageProps?.embeds?.reroll;if(!s)throw new GiveawaysError_1.GiveawaysError("Cannot reroll the winners: "+GiveawaysError_1.errorMessages.UNKNOWN_GIVEAWAY(r.id),GiveawaysError_1.GiveawaysErrorCodes.UNKNOWN_GIVEAWAY);if(e.user.id!==s?.host.id){const r=a?.onlyHostCanReroll||{},i=r?.messageContent,o=this._messageUtils.buildGiveawayEmbed(s.raw,r);e.reply({content:i,embeds:1==Object.keys(r).length&&i?[]:[o],ephemeral:!0}).catch((e=>{if(!e.message.toLowerCase().includes("interaction"))throw new GiveawaysError_1.GiveawaysError("Cannot reply to the button: "+e,GiveawaysError_1.GiveawaysErrorCodes.UNKNOWN_ERROR)}))}else{const r=a?.successMessage||{},i=r?.messageContent;s.reroll();const o=this._messageUtils.buildGiveawayEmbed(s.raw,r);e.reply({content:i,embeds:1==Object.keys(r).length&&i?[]:[o],ephemeral:!0}).catch((e=>{if(!e.message.toLowerCase().includes("interaction"))throw new GiveawaysError_1.GiveawaysError("Cannot reroll the winners: "+e,GiveawaysError_1.GiveawaysErrorCodes.UNKNOWN_ERROR)}))}}}}))}async _sendUpdateMessage(){if(this.options.updatesChecker?.checkUpdates){const e=await(0,checkUpdates_function_1.checkUpdates)();e.updated?this.options.updatesChecker?.upToDateMessage&&(console.log("\n\n"),console.log(this._logger.colors.green+"╔═════════════════════════════════════════════════════════════════╗"),console.log(this._logger.colors.green+"║ @ discord-giveaways-super                                - [] X ║"),console.log(this._logger.colors.green+"║═════════════════════════════════════════════════════════════════║"),console.log(this._logger.colors.yellow+`║                      The module is ${this._logger.colors.cyan}up to date!${this._logger.colors.yellow}                  ║`),console.log(this._logger.colors.magenta+"║                      No updates are available.                  ║"),console.log(this._logger.colors.blue+`║                      Current version is ${e.availableVersion}.                  ║`),console.log(this._logger.colors.cyan+"║                               Enjoy!                            ║"),console.log(this._logger.colors.white+"║                   View the full changelog here:                 ║"),console.log(this._logger.colors.red+`║   https://dgs-docs.js.org/#/docs/main/${e.availableVersion}/general/changelog   ║`),console.log(this._logger.colors.green+"╚═════════════════════════════════════════════════════════════════╝[37m"),console.log("\n\n")):(console.log("\n\n"),console.log(this._logger.colors.green+"╔═════════════════════════════════════════════════════════════════════╗"),console.log(this._logger.colors.green+"║ @ discord-giveaways-super                                    - [] X ║"),console.log(this._logger.colors.green+"║═════════════════════════════════════════════════════════════════════║"),console.log(this._logger.colors.yellow+`║                      The module is ${this._logger.colors.red}out of date!${this._logger.colors.yellow}                     ║`),console.log(this._logger.colors.magenta+"║                       New version is available!                     ║"),console.log(this._logger.colors.blue+`║                             ${e.installedVersion} --\x3e ${e.availableVersion}                         ║`),console.log(this._logger.colors.cyan+'║                Run "npm i discord-giveaways-super@latest"           ║'),console.log(this._logger.colors.cyan+"║                              to update!                             ║"),console.log(this._logger.colors.white+"║                     View the full changelog here:                   ║"),console.log(this._logger.colors.red+`║     https://dgs-docs.js.org/#/docs/main/${e.availableVersion}/general/changelog     ║`),console.log(this._logger.colors.green+"╚═════════════════════════════════════════════════════════════════════╝[37m"),console.log("\n\n"))}}async start(e){const{channelID:r,guildID:s,hostMemberID:a,prize:i,time:o,winnersCount:t,defineEmbedStrings:n,buttons:w}=e;if(!r)throw new GiveawaysError_1.GiveawaysError(GiveawaysError_1.errorMessages.REQUIRED_ARGUMENT_MISSING("channelID","Giveaways.start"),GiveawaysError_1.GiveawaysErrorCodes.REQUIRED_ARGUMENT_MISSING);if(!s)throw new GiveawaysError_1.GiveawaysError(GiveawaysError_1.errorMessages.REQUIRED_ARGUMENT_MISSING("guildID","Giveaways.start"),GiveawaysError_1.GiveawaysErrorCodes.REQUIRED_ARGUMENT_MISSING);if(!a)throw new GiveawaysError_1.GiveawaysError(GiveawaysError_1.errorMessages.REQUIRED_ARGUMENT_MISSING("hostMemberID","Giveaways.start"),GiveawaysError_1.GiveawaysErrorCodes.REQUIRED_ARGUMENT_MISSING);if(!i)throw new GiveawaysError_1.GiveawaysError(GiveawaysError_1.errorMessages.REQUIRED_ARGUMENT_MISSING("prize","Giveaways.start"),GiveawaysError_1.GiveawaysErrorCodes.REQUIRED_ARGUMENT_MISSING);if("string"!=typeof r)throw new GiveawaysError_1.GiveawaysError(GiveawaysError_1.errorMessages.INVALID_TYPE("giveawayOptions.channelID","string",r),GiveawaysError_1.GiveawaysErrorCodes.INVALID_TYPE);if("string"!=typeof s)throw new GiveawaysError_1.GiveawaysError(GiveawaysError_1.errorMessages.INVALID_TYPE("giveawayOptions.guildID","string",s),GiveawaysError_1.GiveawaysErrorCodes.INVALID_TYPE);if("string"!=typeof a)throw new GiveawaysError_1.GiveawaysError(GiveawaysError_1.errorMessages.INVALID_TYPE("giveawayOptions.hostMemberID","string",a),GiveawaysError_1.GiveawaysErrorCodes.INVALID_TYPE);if("string"!=typeof i)throw new GiveawaysError_1.GiveawaysError(GiveawaysError_1.errorMessages.INVALID_TYPE("giveawayOptions.prize","string",i),GiveawaysError_1.GiveawaysErrorCodes.INVALID_TYPE);if("string"!=typeof o)throw new GiveawaysError_1.GiveawaysError(GiveawaysError_1.errorMessages.INVALID_TYPE("giveawayOptions.time","string",o),GiveawaysError_1.GiveawaysErrorCodes.INVALID_TYPE);if(isNaN(t))throw new GiveawaysError_1.GiveawaysError(GiveawaysError_1.errorMessages.INVALID_TYPE("giveawayOptions.winnersCount","number",t),GiveawaysError_1.GiveawaysErrorCodes.INVALID_TYPE);if(w&&"object"!=typeof w)throw new GiveawaysError_1.GiveawaysError(GiveawaysError_1.errorMessages.INVALID_TYPE("giveawayOptions.buttons","object",w),GiveawaysError_1.GiveawaysErrorCodes.INVALID_TYPE);if("function"!=typeof n)throw new GiveawaysError_1.GiveawaysError(GiveawaysError_1.errorMessages.INVALID_TYPE("giveawayOptions.defineEmbedStrings","function",n),GiveawaysError_1.GiveawaysErrorCodes.INVALID_TYPE);if(!(0,isTimeStringValid_function_1.isTimeStringValid)(o))throw new GiveawaysError_1.GiveawaysError(GiveawaysError_1.GiveawaysErrorCodes.INVALID_TIME);const g=w?.joinGiveawayButton,l=w?.rerollButton,y=w?.goToMessageButton,_=this.getGuildGiveaways(s),E={id:(_.at(-1)?.id||0)+1,hostMemberID:a,guildID:s,channelID:r,messageID:"",prize:i,startTimestamp:Math.floor(Date.now()/1e3),endTimestamp:Math.floor((Date.now()+(0,ms_1.ms)(o))/1e3),endedTimestamp:0,time:o||"1d",state:giveaway_interface_1.GiveawayState.STARTED,winnersCount:t||1,entriesCount:0,entriesArray:[],isEnded:!1},v=n?n(giveawayTemplate_1.giveawayTemplate,this.client.users.cache.get(a)):{},G=v?.start||{},c=v?.finish,d=v?.reroll,h=this.client.channels.cache.get(r),u=this._messageUtils.buildGiveawayEmbed(E,G),I=this._messageUtils.buildButtonsRow(g),[m,p]=[c?c("{winnersString}","{numberOfWinners}"):{},d?d("{winnersString}","{numberOfWinners}"):{}],b=await h.send({content:G?.messageContent,embeds:1==Object.keys(G).length&&G?.messageContent?[]:[u],components:[I]});E.messageID=b.id,E.messageURL=b.url,E.endTimestamp=Math.floor((Date.now()+(0,ms_1.ms)(E.time))/1e3),E.messageProps={embeds:{start:G,joinGiveawayMessage:v?.joinGiveawayMessage,leaveGiveawayMessage:v?.leaveGiveawayMessage,finish:m,reroll:p},buttons:{joinGiveawayButton:g,rerollButton:l,goToMessageButton:y}},this.database.push(`${s}.giveaways`,E);const f=new Giveaway_1.Giveaway(this,E);return this.emit("giveawayStart",f),f}get(e){if(!e)throw new GiveawaysError_1.GiveawaysError(GiveawaysError_1.errorMessages.REQUIRED_ARGUMENT_MISSING("giveawayID","Giveaways.get"),GiveawaysError_1.GiveawaysErrorCodes.REQUIRED_ARGUMENT_MISSING);if(isNaN(e))throw new GiveawaysError_1.GiveawaysError(GiveawaysError_1.errorMessages.INVALID_TYPE("giveawayID","number",e),GiveawaysError_1.GiveawaysErrorCodes.INVALID_TYPE);return this.find((r=>r.id==e))||null}find(e){if(!e)throw new GiveawaysError_1.GiveawaysError(GiveawaysError_1.errorMessages.REQUIRED_ARGUMENT_MISSING("cb","Giveaways.find"),GiveawaysError_1.GiveawaysErrorCodes.REQUIRED_ARGUMENT_MISSING);if("function"!=typeof e)throw new GiveawaysError_1.GiveawaysError(GiveawaysError_1.errorMessages.INVALID_TYPE("cb","function",e),GiveawaysError_1.GiveawaysErrorCodes.INVALID_TYPE);return this.getAll().find(e)||null}map(e){if(!e)throw new GiveawaysError_1.GiveawaysError(GiveawaysError_1.errorMessages.REQUIRED_ARGUMENT_MISSING("cb","Giveaways.find"),GiveawaysError_1.GiveawaysErrorCodes.REQUIRED_ARGUMENT_MISSING);if("function"!=typeof e)throw new GiveawaysError_1.GiveawaysError(GiveawaysError_1.errorMessages.INVALID_TYPE("cb","function",e),GiveawaysError_1.GiveawaysErrorCodes.INVALID_TYPE);return this.getAll().map(e)}getGuildGiveaways(e){if(!e)throw new GiveawaysError_1.GiveawaysError(GiveawaysError_1.errorMessages.REQUIRED_ARGUMENT_MISSING("guildID","Giveaways.getGuildGiveaways"),GiveawaysError_1.GiveawaysErrorCodes.REQUIRED_ARGUMENT_MISSING);if("string"!=typeof e)throw new GiveawaysError_1.GiveawaysError(GiveawaysError_1.errorMessages.INVALID_TYPE("guildID","string",e),GiveawaysError_1.GiveawaysErrorCodes.INVALID_TYPE);return(this.database.get(`${e}.giveaways`)||[]).map((e=>new Giveaway_1.Giveaway(this,e)))}getAll(){const e=[],r=this.database.getKeys();for(const s of r.filter((e=>!isNaN(parseInt(e))))){const r=this.database.get(`${s}.giveaways`)||[];for(const s of r)e.push(s)}return e.map((e=>new Giveaway_1.Giveaway(this,e)))}_checkGiveaways(){const e=this.getAll();for(const r of e)r.isFinished&&!r.isEnded&&r.end()}}exports.Giveaways=Giveaways;
